/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-09-13 04:36:50.868372
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((1.0)*x7);
x13=((0.162)*x4);
x14=((0.16)*x2);
x15=((0.5)*x4);
x16=((0.162)*x9);
x17=((1.0)*x4);
x18=((1.0)*x2);
x19=((0.162)*x2);
x20=((0.5)*x2);
x21=((0.16)*x8);
x22=((0.16)*x7);
x23=(x0*x3);
x24=(x3*x9);
x25=(x0*x1);
x26=(x3*x4);
x27=(x1*x9);
x28=(x0*x8);
x29=(x5*x8);
x30=(x1*x2);
x31=((1.0)*x8*x9);
x32=(x18*x3);
x33=((0.16)*x1*x4);
x34=(x1*x18);
x35=(x17*x25);
x36=(x17*x27);
x37=((((-1.0)*x32))+((x1*x4)));
x38=(x37*x8);
x39=(((x23*x4))+((x2*x25)));
x40=(((x2*x27))+((x24*x4)));
x41=((((-1.0)*x18*x25))+(((-1.0)*x17*x23)));
x42=((((-1.0)*x18*x27))+(((-1.0)*x17*x24)));
x43=((((-1.0)*x12*x9))+((x39*x8)));
x44=(((x0*x7))+((x40*x8)));
x45=(((x38*x6))+((x5*((x30+x26)))));
x46=(((x5*(((((-1.0)*x35))+((x2*x23))))))+((x43*x6)));
x47=(((x5*(((((-1.0)*x36))+((x2*x24))))))+((x44*x6)));
eerot[0]=(((x6*(((((-1.0)*x18*x23))+x35))))+((x43*x5)));
eerot[1]=(((x10*(((((-1.0)*x31))+((x41*x7))))))+((x11*x46)));
eerot[2]=(((x10*x46))+((x11*(((((-1.0)*x12*x41))+x31)))));
IkReal x48=((1.0)*x23);
eetrans[0]=(((x5*((((x21*x39))+(((-1.0)*x22*x9))))))+(((-1.0)*x20*x48))+(((-1.0)*x16*x8))+((x6*(((((0.16)*x25*x4))+(((-1.0)*x14*x48))))))+(((0.7)*x23))+((x15*x25))+((x7*(((((-1.0)*x19*x25))+(((-1.0)*x13*x48)))))));
eerot[3]=(((x44*x5))+((x6*(((((-1.0)*x18*x24))+x36)))));
eerot[4]=(((x10*((((x42*x7))+x28))))+((x11*x47)));
eerot[5]=(((x10*x47))+((x11*(((((-1.0)*x12*x42))+(((-1.0)*x28)))))));
IkReal x49=((1.0)*x24);
eetrans[1]=(((x6*(((((-1.0)*x14*x49))+(((0.16)*x27*x4))))))+(((-1.0)*x20*x49))+((x5*((((x0*x22))+((x21*x40))))))+(((0.162)*x28))+(((0.7)*x24))+((x7*(((((-1.0)*x16*x30))+(((-1.0)*x13*x49))))))+((x15*x27)));
eerot[6]=(((x29*x37))+((x6*(((((-1.0)*x34))+(((-1.0)*x17*x3)))))));
eerot[7]=(((x10*x7*(((((-1.0)*x1*x17))+x32))))+((x11*x45)));
eerot[8]=(((x10*x45))+((x11*x37*x7)));
IkReal x50=((1.0)*x3);
IkReal x51=((1.0)*x1);
eetrans[2]=((0.275)+(((0.7)*x1))+(((-1.0)*x15*x50))+((x29*(((((-1.0)*x14*x50))+x33))))+((x7*(((((-1.0)*x13*x51))+((x19*x3))))))+(((-1.0)*x20*x51))+((x6*(((((-1.0)*x14*x51))+(((-0.16)*x26)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r02);
new_r02=((-1.0)*r00);
new_px=(px+(((-0.16)*r00)));
new_r10=r11;
new_r11=((-1.0)*r12);
new_r12=((-1.0)*r10);
new_py=((((-0.16)*r10))+py);
new_r20=r21;
new_r21=((-1.0)*r22);
new_r22=((-1.0)*r20);
new_pz=((-0.275)+(((-0.16)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x55=((1715.0)*rxp1_1);
IkReal x56=((261.8511)*r01);
IkReal x57=((396.9)*px);
IkReal x58=((396.9)*pz);
IkReal x59=((261.8511)*r21);
IkReal x60=((523.7022)*r00);
IkReal x61=((3430.0)*rxp0_1);
IkReal x62=((81.0)*r11);
IkReal x63=((500.0)*py);
IkReal x64=((523.7022)*r11);
IkReal x65=((793.8)*py);
IkReal x66=((3430.0)*rxp1_0);
IkReal x67=((6860.0)*rxp0_0);
IkReal x68=((1047.4044)*r10);
IkReal x69=((324.0)*r00);
IkReal x70=((1000.0)*px);
IkReal x71=((162.0)*r01);
IkReal x72=((162.0)*r10);
IkReal x73=((1225.0)*pp);
IkReal x74=((4900.0)*npx);
IkReal x75=((2450.0)*pp);
IkReal x76=((2450.0)*npy);
IkReal x77=(r01*x73);
IkReal x78=(px*x76);
IkReal x79=(pz*x76);
IkReal x80=(r21*x73);
IkReal x81=(r00*x75);
IkReal x82=(px*x74);
IkReal x83=(x63+(((-1.0)*x62)));
IkReal x84=((-162.0)*r10);
IkReal x85=(r11*x75);
IkReal x86=((4900.0)*npy*py);
IkReal x87=((4900.0)*pp*r10);
IkReal x88=((9800.0)*npx*py);
IkReal x89=((((-1.0)*x70))+x71);
IkReal x90=(x62+(((-1.0)*x63)));
IkReal x91=(x62+x63);
IkReal x92=((((-1.0)*x71))+(((-1.0)*x70)));
IkReal x93=((-1.0)*x91);
IkReal x94=(x78+x57);
IkReal x95=(x78+x55);
IkReal x96=(x61+x82);
IkReal x97=(x60+x81);
IkReal x98=(x77+x56);
IkReal x99=(x64+x85);
IkReal x100=(x66+x86);
IkReal x101=(x59+x80);
IkReal x102=(x68+x87);
IkReal x103=((((523.7022)*r20))+((r20*x75))+(((-1.0)*pz*x74)));
IkReal x104=(x61+x97);
IkReal x105=(x55+x98);
IkReal x106=(x57+x98);
IkReal x107=(x55+x94);
IkReal x108=((((-1.0)*x79))+x101+x58);
IkReal x109=((((-1.0)*x101))+x79+x58);
IkReal x110=(x105+x57);
op[0]=((((-1.0)*x110))+x78);
op[1]=x108;
op[2]=((((-1.0)*x104))+x82);
op[3]=x103;
op[4]=(x105+(((-1.0)*x94)));
op[5]=x109;
op[6]=x108;
op[7]=(x106+(((-1.0)*x95)));
op[8]=x103;
op[9]=(x97+(((-1.0)*x96)));
op[10]=x109;
op[11]=(x107+(((-1.0)*x98)));
op[12]=x83;
op[13]=x83;
op[14]=x84;
op[15]=x84;
op[16]=x91;
op[17]=x91;
op[18]=0;
op[19]=x83;
op[20]=0;
op[21]=x84;
op[22]=0;
op[23]=x91;
op[24]=(x100+(((-1.0)*x99))+(((-1.0)*x65)));
op[25]=0;
op[26]=((((-1.0)*x102))+x67+x88);
op[27]=0;
op[28]=((((-1.0)*x100))+x99+(((-1.0)*x65)));
op[29]=0;
op[30]=0;
op[31]=(x65+x66+x99+(((-1.0)*x86)));
op[32]=0;
op[33]=(x102+x67+(((-1.0)*x88)));
op[34]=0;
op[35]=(x65+x86+(((-1.0)*x99))+(((-1.0)*x66)));
op[36]=x89;
op[37]=x89;
op[38]=x69;
op[39]=x69;
op[40]=x92;
op[41]=x92;
op[42]=0;
op[43]=x89;
op[44]=0;
op[45]=x69;
op[46]=0;
op[47]=x92;
op[48]=((((-1.0)*x78))+x110);
op[49]=x108;
op[50]=(x104+(((-1.0)*x82)));
op[51]=x103;
op[52]=((((-1.0)*x105))+x94);
op[53]=x109;
op[54]=x108;
op[55]=((((-1.0)*x106))+x95);
op[56]=x103;
op[57]=(x96+(((-1.0)*x97)));
op[58]=x109;
op[59]=((((-1.0)*x107))+x98);
op[60]=x90;
op[61]=x90;
op[62]=x72;
op[63]=x72;
op[64]=x93;
op[65]=x93;
op[66]=0;
op[67]=x90;
op[68]=0;
op[69]=x72;
op[70]=0;
op[71]=x93;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj5)||isnan(htj1)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x111=htj0*htj0;
CheckValue<IkReal> x112=IKPowWithIntegerCheck(((1.0)+x111),-1);
if(!x112.valid){
continue;
}
cj0array[numsolutions]=((x112.value)*(((1.0)+(((-1.0)*x111)))));
CheckValue<IkReal> x113=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x113.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x113.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x114=htj5*htj5;
CheckValue<IkReal> x115=IKPowWithIntegerCheck(((1.0)+x114),-1);
if(!x115.valid){
continue;
}
cj5array[numsolutions]=((x115.value)*(((1.0)+(((-1.0)*x114)))));
CheckValue<IkReal> x116=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x116.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x116.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x117=htj1*htj1;
CheckValue<IkReal> x118=IKPowWithIntegerCheck(((1.0)+x117),-1);
if(!x118.valid){
continue;
}
cj1array[numsolutions]=((x118.value)*(((1.0)+(((-1.0)*x117)))));
CheckValue<IkReal> x119=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x119.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x119.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((((6.17283950617284)*cj0*py))+(((-6.17283950617284)*px*sj0)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x120=((1.0)*sj0);
evalcond[0]=(((cj0*cj5*r11))+(((-1.0)*r00*sj5*x120))+((cj0*r10*sj5))+(((-1.0)*(IKcos(j3))))+(((-1.0)*cj5*r01*x120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x121=cj3*cj3;
j2eval[0]=((-1.0)+x121);
j2eval[1]=IKsign(((-0.162)+(((0.162)*x121))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x122=cj0*cj0;
IkReal x123=cj5*cj5;
IkReal x124=r01*r01;
IkReal x125=r11*r11;
IkReal x126=r00*r00;
IkReal x127=r02*r02;
IkReal x128=(cj0*sj3);
IkReal x129=(cj5*sj5);
IkReal x130=((2.0)*r11);
IkReal x131=(r00*sj0);
IkReal x132=(r02*sj0);
IkReal x133=((1.0)*x123);
IkReal x134=(cj0*r01*sj0);
IkReal x135=((2.0)*r00*r01);
IkReal x136=((2.0)*cj0*r10*sj0);
IkReal x137=(x122*x125);
IkReal x138=(x122*x124);
IkReal x139=((((-2.0)*cj0*r12*x132))+((cj0*x129*x130*x131))+((x123*x130*x134))+(((-2.0)*cj0*r10*x123*x131))+(((-1.0)*x122*x126*x133))+(((-1.0)*x122*x127))+(((2.0)*r10*x129*x134))+(((-1.0)*r10*x122*x129*x130))+(((-1.0)*x124*x133))+(((-1.0)*x133*x137))+x137+x127+x124+((x123*x138))+((x123*x126))+((x122*x129*x135))+(((-1.0)*x138))+((x122*x123*(r10*r10)))+(((-1.0)*x129*x135))+(((-1.0)*x130*x134))+((x122*(r12*r12))));
j4eval[0]=x139;
j4eval[1]=IKsign(x139);
j4eval[2]=((IKabs((((sj3*x132))+(((-1.0)*r12*x128)))))+(IKabs(((((-1.0)*cj5*sj3*x131))+(((-1.0)*r11*sj5*x128))+((cj5*r10*x128))+((r01*sj0*sj3*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x140=((2.0)*sj1);
IkReal x141=(cj0*px);
IkReal x142=((2.0)*cj1);
IkReal x143=(py*sj0);
if( IKabs((((x142*x143))+(((-1.0)*pz*x140))+((x141*x142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x140*x143))+(((-1.0)*x140*x141))+(((-1.0)*pz*x142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x142*x143))+(((-1.0)*pz*x140))+((x141*x142))))+IKsqr(((1.4)+(((-1.0)*x140*x143))+(((-1.0)*x140*x141))+(((-1.0)*pz*x142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x142*x143))+(((-1.0)*pz*x140))+((x141*x142))), ((1.4)+(((-1.0)*x140*x143))+(((-1.0)*x140*x141))+(((-1.0)*pz*x142))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x144=IKsin(j2);
IkReal x145=IKcos(j2);
IkReal x146=((0.5)*cj1);
IkReal x147=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x144*x147))+((x145*x146))+pz);
evalcond[1]=((((0.7)*sj1))+((x144*x146))+(((-1.0)*py*sj0))+(((-1.0)*x145*x147))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x148=cj5*cj5;
IkReal x149=r21*r21;
IkReal x150=((r22*r22)+x149+(((-2.0)*cj5*r20*r21*sj5))+((x148*(r20*r20)))+(((-1.0)*x148*x149)));
j4eval[0]=x150;
j4eval[1]=IKsign(x150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x151=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x151;
j4eval[1]=IKsign(x151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x152=cj5*cj5;
IkReal x153=(r00*sj0);
IkReal x154=((1.0)*sj0);
IkReal x155=(r01*r21);
IkReal x156=(cj0*r10);
IkReal x157=(cj0*r11*r21);
IkReal x158=(cj5*r21*sj5);
IkReal x159=((1.0)*x152);
IkReal x160=(cj5*r20*sj5);
IkReal x161=(((x153*x158))+(((-1.0)*x157*x159))+(((-1.0)*x154*x155))+(((-1.0)*r02*r22*x154))+x157+((sj0*x152*x155))+(((-1.0)*cj0*r11*x160))+(((-1.0)*x156*x158))+((cj0*r12*r22))+((r20*x152*x156))+((r01*sj0*x160))+(((-1.0)*r20*x153*x159)));
j4eval[0]=x161;
j4eval[1]=IKsign(x161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x162=cj5*cj5;
IkReal x163=(sj1*sj2);
IkReal x164=(r01*sj0);
IkReal x165=(cj0*r10);
IkReal x166=((1.0)*sj5);
IkReal x167=(cj5*r21);
IkReal x168=(cj1*cj2);
IkReal x169=(cj0*r11);
IkReal x170=(cj5*r20);
IkReal x171=(cj0*r12);
IkReal x172=(r20*x162);
IkReal x173=((1.0)*r02*sj0);
IkReal x174=(r21*x162);
IkReal x175=((1.0)*r00*sj0);
CheckValue<IkReal> x176 = IKatan2WithCheck(IkReal(((((-1.0)*x166*x168*x169))+((cj5*x163*x165))+((sj5*x163*x164))+(((-1.0)*cj5*x168*x175))+((cj5*x165*x168))+(((-1.0)*x163*x166*x169))+((sj5*x164*x168))+(((-1.0)*cj5*x163*x175)))),IkReal(((((-1.0)*x163*x173))+((x168*x171))+(((-1.0)*x168*x173))+((x163*x171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x176.valid){
continue;
}
CheckValue<IkReal> x177=IKPowWithIntegerCheck(IKsign((((r22*x171))+(((-1.0)*x166*x169*x170))+(((-1.0)*r22*x173))+(((-1.0)*x169*x174))+((r21*x169))+((x164*x174))+((sj5*x164*x170))+((x165*x172))+(((-1.0)*x165*x166*x167))+((r00*sj0*sj5*x167))+(((-1.0)*r21*x164))+(((-1.0)*x172*x175)))),-1);
if(!x177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x176.value)+(((1.5707963267949)*(x177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x178=IKsin(j4);
IkReal x179=IKcos(j4);
IkReal x180=(cj2*sj1);
IkReal x181=(sj1*sj2);
IkReal x182=((1.0)*cj5);
IkReal x183=((1.0)*cj1);
IkReal x184=((1.0)*r01);
IkReal x185=(r02*sj0);
IkReal x186=(r11*sj5);
IkReal x187=(r21*sj5);
IkReal x188=(r01*sj5);
IkReal x189=(sj2*x183);
IkReal x190=(cj0*x178);
IkReal x191=(cj5*x178);
IkReal x192=((1.0)*x178);
IkReal x193=(sj0*x179);
IkReal x194=(cj0*x179);
IkReal x195=(sj0*sj5*x178);
IkReal x196=((1.0)*x194);
evalcond[0]=(((r22*x179))+(((-1.0)*x181))+(((-1.0)*x187*x192))+((r20*x191))+(((-1.0)*cj2*x183)));
evalcond[1]=((((-1.0)*x189))+(((-1.0)*r22*x192))+x180+((cj5*r20*x179))+(((-1.0)*x179*x187)));
evalcond[2]=(((x186*x190))+(((-1.0)*r12*x196))+((x179*x185))+(((-1.0)*r10*x182*x190))+(((-1.0)*x184*x195))+((r00*sj0*x191)));
evalcond[3]=(((x186*x194))+(((-1.0)*sj5*x184*x193))+(((-1.0)*r10*x182*x194))+(((-1.0)*x185*x192))+((r12*x190))+((cj5*r00*x193)));
evalcond[4]=(((x186*x193))+((x188*x194))+(((-1.0)*r10*x182*x193))+x181+((r12*sj0*x178))+(((-1.0)*r00*x182*x194))+((cj1*cj2))+((r02*x190)));
evalcond[5]=((((-1.0)*r12*x193))+(((-1.0)*x189))+((x188*x190))+x180+(((-1.0)*r02*x196))+(((-1.0)*r00*x182*x190))+((sj0*x178*x186))+(((-1.0)*r10*sj0*x178*x182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x197=(cj1*cj2);
IkReal x198=(cj5*sj0);
IkReal x199=(sj1*sj2);
IkReal x200=(cj0*r12);
IkReal x201=(cj0*cj5);
IkReal x202=((1.0)*r10);
IkReal x203=(sj0*sj5);
IkReal x204=((1.0)*r01);
IkReal x205=(cj0*r11*sj5);
IkReal x206=((1.0)*r02*sj0);
CheckValue<IkReal> x207 = IKatan2WithCheck(IkReal(((((-1.0)*x197*x206))+((x197*x200))+(((-1.0)*x199*x206))+((x199*x200)))),IkReal(((((-1.0)*x197*x201*x202))+((r00*x197*x198))+((x197*x205))+((r00*x198*x199))+(((-1.0)*x199*x201*x202))+(((-1.0)*x197*x203*x204))+(((-1.0)*x199*x203*x204))+((x199*x205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x207.valid){
continue;
}
CheckValue<IkReal> x208=IKPowWithIntegerCheck(IKsign((((r01*x201))+((r10*x203))+((cj0*r00*sj5))+((r11*x198)))),-1);
if(!x208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x207.value)+(((1.5707963267949)*(x208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x209=IKsin(j4);
IkReal x210=IKcos(j4);
IkReal x211=(cj2*sj1);
IkReal x212=(sj1*sj2);
IkReal x213=((1.0)*cj5);
IkReal x214=((1.0)*cj1);
IkReal x215=((1.0)*r01);
IkReal x216=(r02*sj0);
IkReal x217=(r11*sj5);
IkReal x218=(r21*sj5);
IkReal x219=(r01*sj5);
IkReal x220=(sj2*x214);
IkReal x221=(cj0*x209);
IkReal x222=(cj5*x209);
IkReal x223=((1.0)*x209);
IkReal x224=(sj0*x210);
IkReal x225=(cj0*x210);
IkReal x226=(sj0*sj5*x209);
IkReal x227=((1.0)*x225);
evalcond[0]=(((r20*x222))+(((-1.0)*cj2*x214))+(((-1.0)*x212))+(((-1.0)*x218*x223))+((r22*x210)));
evalcond[1]=(x211+((cj5*r20*x210))+(((-1.0)*x220))+(((-1.0)*x210*x218))+(((-1.0)*r22*x223)));
evalcond[2]=((((-1.0)*x215*x226))+(((-1.0)*r10*x213*x221))+((x210*x216))+((r00*sj0*x222))+(((-1.0)*r12*x227))+((x217*x221)));
evalcond[3]=((((-1.0)*x216*x223))+(((-1.0)*r10*x213*x225))+((r12*x221))+((cj5*r00*x224))+(((-1.0)*sj5*x215*x224))+((x217*x225)));
evalcond[4]=((((-1.0)*r10*x213*x224))+((x219*x225))+x212+((x217*x224))+((cj1*cj2))+((r02*x221))+((r12*sj0*x209))+(((-1.0)*r00*x213*x225)));
evalcond[5]=(((sj0*x209*x217))+(((-1.0)*r02*x227))+((x219*x221))+x211+(((-1.0)*r10*sj0*x209*x213))+(((-1.0)*r12*x224))+(((-1.0)*x220))+(((-1.0)*r00*x213*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x228=cj5*cj5;
IkReal x229=r21*r21;
IkReal x230=(cj5*r20);
IkReal x231=((1.0)*sj1);
IkReal x232=(cj1*sj2);
IkReal x233=(r21*sj5);
IkReal x234=(cj1*cj2);
IkReal x235=(r22*sj1);
CheckValue<IkReal> x236=IKPowWithIntegerCheck(IKsign(((((-2.0)*x230*x233))+(r22*r22)+(((-1.0)*x228*x229))+x229+((x228*(r20*r20))))),-1);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237 = IKatan2WithCheck(IkReal(((((-1.0)*x233*x234))+((sj1*sj2*x230))+(((-1.0)*sj2*x231*x233))+((cj2*x235))+(((-1.0)*r22*x232))+((x230*x234)))),IkReal((((sj2*x235))+(((-1.0)*x232*x233))+((cj2*sj1*x233))+((x230*x232))+(((-1.0)*cj2*x230*x231))+((r22*x234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x236.value)))+(x237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x238=IKsin(j4);
IkReal x239=IKcos(j4);
IkReal x240=(cj2*sj1);
IkReal x241=(sj1*sj2);
IkReal x242=((1.0)*cj5);
IkReal x243=((1.0)*cj1);
IkReal x244=((1.0)*r01);
IkReal x245=(r02*sj0);
IkReal x246=(r11*sj5);
IkReal x247=(r21*sj5);
IkReal x248=(r01*sj5);
IkReal x249=(sj2*x243);
IkReal x250=(cj0*x238);
IkReal x251=(cj5*x238);
IkReal x252=((1.0)*x238);
IkReal x253=(sj0*x239);
IkReal x254=(cj0*x239);
IkReal x255=(sj0*sj5*x238);
IkReal x256=((1.0)*x254);
evalcond[0]=((((-1.0)*x241))+((r20*x251))+(((-1.0)*cj2*x243))+(((-1.0)*x247*x252))+((r22*x239)));
evalcond[1]=((((-1.0)*r22*x252))+((cj5*r20*x239))+x240+(((-1.0)*x249))+(((-1.0)*x239*x247)));
evalcond[2]=(((x246*x250))+(((-1.0)*r10*x242*x250))+((r00*sj0*x251))+(((-1.0)*x244*x255))+((x239*x245))+(((-1.0)*r12*x256)));
evalcond[3]=(((x246*x254))+(((-1.0)*r10*x242*x254))+((r12*x250))+(((-1.0)*sj5*x244*x253))+((cj5*r00*x253))+(((-1.0)*x245*x252)));
evalcond[4]=(((x246*x253))+(((-1.0)*r10*x242*x253))+((x248*x254))+x241+((cj1*cj2))+((r12*sj0*x238))+((r02*x250))+(((-1.0)*r00*x242*x254)));
evalcond[5]=(((x248*x250))+(((-1.0)*r02*x256))+((sj0*x238*x246))+x240+(((-1.0)*x249))+(((-1.0)*r12*x253))+(((-1.0)*r10*sj0*x238*x242))+(((-1.0)*r00*x242*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x257=((2.0)*sj1);
IkReal x258=(cj0*px);
IkReal x259=((2.0)*cj1);
IkReal x260=(py*sj0);
if( IKabs((((x259*x260))+(((-1.0)*pz*x257))+((x258*x259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x257*x258))+(((-1.0)*pz*x259))+(((-1.0)*x257*x260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x259*x260))+(((-1.0)*pz*x257))+((x258*x259))))+IKsqr(((1.4)+(((-1.0)*x257*x258))+(((-1.0)*pz*x259))+(((-1.0)*x257*x260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x259*x260))+(((-1.0)*pz*x257))+((x258*x259))), ((1.4)+(((-1.0)*x257*x258))+(((-1.0)*pz*x259))+(((-1.0)*x257*x260))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x261=IKsin(j2);
IkReal x262=IKcos(j2);
IkReal x263=((0.5)*cj1);
IkReal x264=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x262*x263))+pz+((x261*x264)));
evalcond[1]=((((-1.0)*x262*x264))+(((0.7)*sj1))+(((-1.0)*py*sj0))+((x261*x263))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x265=cj5*cj5;
IkReal x266=r21*r21;
IkReal x267=((r22*r22)+(((-1.0)*x265*x266))+x266+(((-2.0)*cj5*r20*r21*sj5))+((x265*(r20*r20))));
j4eval[0]=x267;
j4eval[1]=IKsign(x267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x268=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x268;
j4eval[1]=IKsign(x268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x269=cj5*cj5;
IkReal x270=(r00*sj0);
IkReal x271=((1.0)*sj0);
IkReal x272=(r01*r21);
IkReal x273=(cj0*r10);
IkReal x274=(cj0*r11*r21);
IkReal x275=(cj5*r21*sj5);
IkReal x276=((1.0)*x269);
IkReal x277=(cj5*r20*sj5);
IkReal x278=((((-1.0)*x273*x275))+(((-1.0)*x274*x276))+((sj0*x269*x272))+(((-1.0)*r20*x270*x276))+(((-1.0)*x271*x272))+(((-1.0)*cj0*r11*x277))+(((-1.0)*r02*r22*x271))+((x270*x275))+x274+((cj0*r12*r22))+((r20*x269*x273))+((r01*sj0*x277)));
j4eval[0]=x278;
j4eval[1]=IKsign(x278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x279=cj5*cj5;
IkReal x280=(sj1*sj2);
IkReal x281=(r01*sj0);
IkReal x282=(cj0*r10);
IkReal x283=((1.0)*sj5);
IkReal x284=(cj5*r21);
IkReal x285=(cj1*cj2);
IkReal x286=(cj0*r11);
IkReal x287=(cj5*r20);
IkReal x288=(cj0*r12);
IkReal x289=(r20*x279);
IkReal x290=((1.0)*r02*sj0);
IkReal x291=(r21*x279);
IkReal x292=((1.0)*r00*sj0);
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((((-1.0)*x283*x286*x287))+(((-1.0)*x286*x291))+(((-1.0)*x289*x292))+((x281*x291))+((r21*x286))+((r00*sj0*sj5*x284))+((r22*x288))+((sj5*x281*x287))+(((-1.0)*r21*x281))+(((-1.0)*r22*x290))+(((-1.0)*x282*x283*x284))+((x282*x289)))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x280*x292))+(((-1.0)*x280*x283*x286))+((cj5*x282*x285))+((sj5*x280*x281))+((sj5*x281*x285))+((cj5*x280*x282))+(((-1.0)*cj5*x285*x292))+(((-1.0)*x283*x285*x286)))),IkReal((((x285*x288))+(((-1.0)*x285*x290))+(((-1.0)*x280*x290))+((x280*x288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x293.value)))+(x294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x295=IKsin(j4);
IkReal x296=IKcos(j4);
IkReal x297=(cj5*r00);
IkReal x298=((1.0)*cj1);
IkReal x299=((1.0)*r01);
IkReal x300=((1.0)*sj1);
IkReal x301=(r11*sj5);
IkReal x302=(cj2*x298);
IkReal x303=(sj2*x300);
IkReal x304=(cj0*x295);
IkReal x305=(sj0*x296);
IkReal x306=(cj5*x295);
IkReal x307=((1.0)*x295);
IkReal x308=((1.0)*cj5*r10);
IkReal x309=(sj5*x296);
IkReal x310=(sj0*x295);
IkReal x311=(sj5*x310);
IkReal x312=((1.0)*cj0*x296);
IkReal x313=(x302+x303);
evalcond[0]=((((-1.0)*r21*sj5*x307))+(((-1.0)*x313))+((r20*x306))+((r22*x296)));
evalcond[1]=((((-1.0)*r22*x307))+(((-1.0)*cj2*x300))+((cj5*r20*x296))+((cj1*sj2))+(((-1.0)*r21*x309)));
evalcond[2]=(((x301*x304))+((x297*x310))+((r02*x305))+(((-1.0)*r12*x312))+(((-1.0)*x299*x311))+(((-1.0)*x304*x308)));
evalcond[3]=(((cj0*x296*x301))+(((-1.0)*cj0*x296*x308))+(((-1.0)*sj5*x299*x305))+((x297*x305))+(((-1.0)*r02*sj0*x307))+((r12*x304)));
evalcond[4]=(((x301*x305))+(((-1.0)*x297*x312))+((cj0*r01*x309))+((r02*x304))+(((-1.0)*x313))+(((-1.0)*x305*x308))+((r12*x310)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x312))+(((-1.0)*r12*x305))+((r01*sj5*x304))+((x301*x310))+(((-1.0)*sj2*x298))+(((-1.0)*r10*sj0*x306))+(((-1.0)*x297*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x314=(cj1*cj2);
IkReal x315=(cj5*sj0);
IkReal x316=(sj1*sj2);
IkReal x317=(cj0*r12);
IkReal x318=(cj0*cj5);
IkReal x319=((1.0)*r10);
IkReal x320=(sj0*sj5);
IkReal x321=((1.0)*r01);
IkReal x322=(cj0*r11*sj5);
IkReal x323=((1.0)*r02*sj0);
CheckValue<IkReal> x324 = IKatan2WithCheck(IkReal(((((-1.0)*x314*x323))+(((-1.0)*x316*x323))+((x314*x317))+((x316*x317)))),IkReal(((((-1.0)*x314*x320*x321))+(((-1.0)*x316*x318*x319))+(((-1.0)*x316*x320*x321))+((x314*x322))+(((-1.0)*x314*x318*x319))+((r00*x314*x315))+((x316*x322))+((r00*x315*x316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325=IKPowWithIntegerCheck(IKsign((((r11*x315))+((r01*x318))+((r10*x320))+((cj0*r00*sj5)))),-1);
if(!x325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x324.value)+(((1.5707963267949)*(x325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x326=IKsin(j4);
IkReal x327=IKcos(j4);
IkReal x328=(cj5*r00);
IkReal x329=((1.0)*cj1);
IkReal x330=((1.0)*r01);
IkReal x331=((1.0)*sj1);
IkReal x332=(r11*sj5);
IkReal x333=(cj2*x329);
IkReal x334=(sj2*x331);
IkReal x335=(cj0*x326);
IkReal x336=(sj0*x327);
IkReal x337=(cj5*x326);
IkReal x338=((1.0)*x326);
IkReal x339=((1.0)*cj5*r10);
IkReal x340=(sj5*x327);
IkReal x341=(sj0*x326);
IkReal x342=(sj5*x341);
IkReal x343=((1.0)*cj0*x327);
IkReal x344=(x333+x334);
evalcond[0]=((((-1.0)*r21*sj5*x338))+((r20*x337))+((r22*x327))+(((-1.0)*x344)));
evalcond[1]=((((-1.0)*r21*x340))+((cj1*sj2))+((cj5*r20*x327))+(((-1.0)*cj2*x331))+(((-1.0)*r22*x338)));
evalcond[2]=((((-1.0)*x330*x342))+(((-1.0)*r12*x343))+((x332*x335))+((r02*x336))+((x328*x341))+(((-1.0)*x335*x339)));
evalcond[3]=(((r12*x335))+((cj0*x327*x332))+(((-1.0)*r02*sj0*x338))+((x328*x336))+(((-1.0)*cj0*x327*x339))+(((-1.0)*sj5*x330*x336)));
evalcond[4]=(((cj0*r01*x340))+((x332*x336))+((r02*x335))+(((-1.0)*x344))+((r12*x341))+(((-1.0)*x328*x343))+(((-1.0)*x336*x339)));
evalcond[5]=((((-1.0)*r02*x343))+((cj2*sj1))+(((-1.0)*x328*x335))+(((-1.0)*r12*x336))+((r01*sj5*x335))+(((-1.0)*r10*sj0*x337))+((x332*x341))+(((-1.0)*sj2*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x345=cj5*cj5;
IkReal x346=r21*r21;
IkReal x347=(cj1*cj2);
IkReal x348=(sj1*sj2);
IkReal x349=(cj5*r20);
IkReal x350=(cj2*sj1);
IkReal x351=(r21*sj5);
IkReal x352=(cj1*sj2);
IkReal x353=((1.0)*x351);
CheckValue<IkReal> x354 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x350))+((x348*x349))+(((-1.0)*x348*x353))+((r22*x352))+((x347*x349))+(((-1.0)*x347*x353)))),IkReal((((r22*x348))+((r22*x347))+((x351*x352))+((x349*x350))+(((-1.0)*x349*x352))+(((-1.0)*x350*x353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign(((r22*r22)+x346+((x345*(r20*r20)))+(((-1.0)*x345*x346))+(((-2.0)*x349*x351)))),-1);
if(!x355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x354.value)+(((1.5707963267949)*(x355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x356=IKsin(j4);
IkReal x357=IKcos(j4);
IkReal x358=(cj5*r00);
IkReal x359=((1.0)*cj1);
IkReal x360=((1.0)*r01);
IkReal x361=((1.0)*sj1);
IkReal x362=(r11*sj5);
IkReal x363=(cj2*x359);
IkReal x364=(sj2*x361);
IkReal x365=(cj0*x356);
IkReal x366=(sj0*x357);
IkReal x367=(cj5*x356);
IkReal x368=((1.0)*x356);
IkReal x369=((1.0)*cj5*r10);
IkReal x370=(sj5*x357);
IkReal x371=(sj0*x356);
IkReal x372=(sj5*x371);
IkReal x373=((1.0)*cj0*x357);
IkReal x374=(x363+x364);
evalcond[0]=(((r20*x367))+(((-1.0)*x374))+(((-1.0)*r21*sj5*x368))+((r22*x357)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r21*x370))+(((-1.0)*cj2*x361))+((cj5*r20*x357))+(((-1.0)*r22*x368)));
evalcond[2]=(((x358*x371))+(((-1.0)*x360*x372))+(((-1.0)*r12*x373))+(((-1.0)*x365*x369))+((x362*x365))+((r02*x366)));
evalcond[3]=(((x358*x366))+(((-1.0)*sj5*x360*x366))+((cj0*x357*x362))+(((-1.0)*cj0*x357*x369))+((r12*x365))+(((-1.0)*r02*sj0*x368)));
evalcond[4]=((((-1.0)*x374))+(((-1.0)*x358*x373))+((cj0*r01*x370))+(((-1.0)*x366*x369))+((r12*x371))+((x362*x366))+((r02*x365)));
evalcond[5]=((((-1.0)*sj2*x359))+((cj2*sj1))+(((-1.0)*x358*x365))+(((-1.0)*r02*x373))+((r01*sj5*x365))+(((-1.0)*r10*sj0*x367))+(((-1.0)*r12*x366))+((x362*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((-1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x375=((2.0)*sj1);
IkReal x376=(cj0*px);
IkReal x377=((2.0)*cj1);
IkReal x378=(py*sj0);
if( IKabs((((x376*x377))+((x377*x378))+(((-1.0)*pz*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x377))+(((-1.0)*x375*x378))+(((-1.0)*x375*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x376*x377))+((x377*x378))+(((-1.0)*pz*x375))))+IKsqr(((1.4)+(((-1.0)*pz*x377))+(((-1.0)*x375*x378))+(((-1.0)*x375*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x376*x377))+((x377*x378))+(((-1.0)*pz*x375))), ((1.4)+(((-1.0)*pz*x377))+(((-1.0)*x375*x378))+(((-1.0)*x375*x376))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x379=IKsin(j2);
IkReal x380=IKcos(j2);
IkReal x381=((0.5)*cj1);
IkReal x382=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x379*x382))+pz+((x380*x381)));
evalcond[1]=((((0.7)*sj1))+(((-1.0)*x380*x382))+((x379*x381))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x383=cj5*cj5;
IkReal x384=r21*r21;
IkReal x385=((((-1.0)*x383*x384))+(r22*r22)+x384+(((-2.0)*cj5*r20*r21*sj5))+((x383*(r20*r20))));
j4eval[0]=x385;
j4eval[1]=IKsign(x385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x386=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x386;
j4eval[1]=IKsign(x386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x387=cj5*cj5;
IkReal x388=(r00*sj0);
IkReal x389=((1.0)*sj0);
IkReal x390=(r01*r21);
IkReal x391=(cj0*r10);
IkReal x392=(cj0*r11*r21);
IkReal x393=(cj5*r21*sj5);
IkReal x394=((1.0)*x387);
IkReal x395=(cj5*r20*sj5);
IkReal x396=((((-1.0)*x389*x390))+((sj0*x387*x390))+x392+(((-1.0)*cj0*r11*x395))+((cj0*r12*r22))+((r01*sj0*x395))+(((-1.0)*r02*r22*x389))+(((-1.0)*r20*x388*x394))+((r20*x387*x391))+(((-1.0)*x392*x394))+((x388*x393))+(((-1.0)*x391*x393)));
j4eval[0]=x396;
j4eval[1]=IKsign(x396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x397=cj5*cj5;
IkReal x398=(sj1*sj2);
IkReal x399=(r01*sj0);
IkReal x400=(cj0*r10);
IkReal x401=((1.0)*sj5);
IkReal x402=(cj5*r21);
IkReal x403=(cj1*cj2);
IkReal x404=(cj0*r11);
IkReal x405=(cj5*r20);
IkReal x406=(cj0*r12);
IkReal x407=(r20*x397);
IkReal x408=((1.0)*r02*sj0);
IkReal x409=(r21*x397);
IkReal x410=((1.0)*r00*sj0);
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal((((cj5*x400*x403))+(((-1.0)*cj5*x403*x410))+((sj5*x398*x399))+((sj5*x399*x403))+(((-1.0)*cj5*x398*x410))+(((-1.0)*x398*x401*x404))+(((-1.0)*x401*x403*x404))+((cj5*x398*x400)))),IkReal(((((-1.0)*x403*x408))+(((-1.0)*x398*x408))+((x398*x406))+((x403*x406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
CheckValue<IkReal> x412=IKPowWithIntegerCheck(IKsign(((((-1.0)*x401*x404*x405))+((r22*x406))+(((-1.0)*x400*x401*x402))+((sj5*x399*x405))+(((-1.0)*r21*x399))+((r21*x404))+(((-1.0)*x407*x410))+((x399*x409))+((r00*sj0*sj5*x402))+((x400*x407))+(((-1.0)*x404*x409))+(((-1.0)*r22*x408)))),-1);
if(!x412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x411.value)+(((1.5707963267949)*(x412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x413=IKsin(j4);
IkReal x414=IKcos(j4);
IkReal x415=(cj2*sj1);
IkReal x416=(sj1*sj2);
IkReal x417=((1.0)*cj5);
IkReal x418=((1.0)*cj1);
IkReal x419=((1.0)*r01);
IkReal x420=(r02*sj0);
IkReal x421=(r11*sj5);
IkReal x422=(r21*sj5);
IkReal x423=(r01*sj5);
IkReal x424=(sj2*x418);
IkReal x425=(cj0*x413);
IkReal x426=(cj5*x413);
IkReal x427=((1.0)*x413);
IkReal x428=(sj0*x414);
IkReal x429=(cj0*x414);
IkReal x430=(sj0*sj5*x413);
IkReal x431=((1.0)*x429);
evalcond[0]=((((-1.0)*x422*x427))+((r20*x426))+(((-1.0)*cj2*x418))+((r22*x414))+(((-1.0)*x416)));
evalcond[1]=((((-1.0)*x424))+(((-1.0)*x414*x422))+x415+((cj5*r20*x414))+(((-1.0)*r22*x427)));
evalcond[2]=((((-1.0)*r12*x431))+((x414*x420))+((r00*sj0*x426))+(((-1.0)*r10*x417*x425))+(((-1.0)*x419*x430))+((x421*x425)));
evalcond[3]=((((-1.0)*x420*x427))+((cj5*r00*x428))+(((-1.0)*r10*x417*x429))+(((-1.0)*sj5*x419*x428))+((r12*x425))+((x421*x429)));
evalcond[4]=(((r12*sj0*x413))+((r02*x425))+(((-1.0)*r00*x417*x429))+x416+((x423*x429))+((cj1*cj2))+(((-1.0)*r10*x417*x428))+((x421*x428)));
evalcond[5]=((((-1.0)*r12*x428))+(((-1.0)*x424))+(((-1.0)*r00*x417*x425))+x415+(((-1.0)*r02*x431))+((x423*x425))+((sj0*x413*x421))+(((-1.0)*r10*sj0*x413*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x432=(cj1*cj2);
IkReal x433=(cj5*sj0);
IkReal x434=(sj1*sj2);
IkReal x435=(cj0*r12);
IkReal x436=(cj0*cj5);
IkReal x437=((1.0)*r10);
IkReal x438=(sj0*sj5);
IkReal x439=((1.0)*r01);
IkReal x440=(cj0*r11*sj5);
IkReal x441=((1.0)*r02*sj0);
CheckValue<IkReal> x442=IKPowWithIntegerCheck(IKsign((((cj0*r00*sj5))+((r01*x436))+((r10*x438))+((r11*x433)))),-1);
if(!x442.valid){
continue;
}
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal((((x434*x435))+(((-1.0)*x432*x441))+(((-1.0)*x434*x441))+((x432*x435)))),IkReal((((x434*x440))+(((-1.0)*x432*x438*x439))+(((-1.0)*x434*x438*x439))+((r00*x432*x433))+(((-1.0)*x434*x436*x437))+((r00*x433*x434))+(((-1.0)*x432*x436*x437))+((x432*x440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x442.value)))+(x443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x444=IKsin(j4);
IkReal x445=IKcos(j4);
IkReal x446=(cj2*sj1);
IkReal x447=(sj1*sj2);
IkReal x448=((1.0)*cj5);
IkReal x449=((1.0)*cj1);
IkReal x450=((1.0)*r01);
IkReal x451=(r02*sj0);
IkReal x452=(r11*sj5);
IkReal x453=(r21*sj5);
IkReal x454=(r01*sj5);
IkReal x455=(sj2*x449);
IkReal x456=(cj0*x444);
IkReal x457=(cj5*x444);
IkReal x458=((1.0)*x444);
IkReal x459=(sj0*x445);
IkReal x460=(cj0*x445);
IkReal x461=(sj0*sj5*x444);
IkReal x462=((1.0)*x460);
evalcond[0]=((((-1.0)*cj2*x449))+(((-1.0)*x447))+((r20*x457))+((r22*x445))+(((-1.0)*x453*x458)));
evalcond[1]=(((cj5*r20*x445))+(((-1.0)*x455))+(((-1.0)*x445*x453))+x446+(((-1.0)*r22*x458)));
evalcond[2]=((((-1.0)*r10*x448*x456))+((x452*x456))+(((-1.0)*r12*x462))+(((-1.0)*x450*x461))+((x445*x451))+((r00*sj0*x457)));
evalcond[3]=(((x452*x460))+(((-1.0)*r10*x448*x460))+((r12*x456))+(((-1.0)*x451*x458))+(((-1.0)*sj5*x450*x459))+((cj5*r00*x459)));
evalcond[4]=(((x454*x460))+(((-1.0)*r10*x448*x459))+((x452*x459))+x447+((r02*x456))+(((-1.0)*r00*x448*x460))+((cj1*cj2))+((r12*sj0*x444)));
evalcond[5]=(((sj0*x444*x452))+((x454*x456))+(((-1.0)*x455))+x446+(((-1.0)*r02*x462))+(((-1.0)*r12*x459))+(((-1.0)*r00*x448*x456))+(((-1.0)*r10*sj0*x444*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x463=cj5*cj5;
IkReal x464=r21*r21;
IkReal x465=(cj5*r20);
IkReal x466=((1.0)*sj1);
IkReal x467=(cj1*sj2);
IkReal x468=(r21*sj5);
IkReal x469=(cj1*cj2);
IkReal x470=(r22*sj1);
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal((((x465*x469))+(((-1.0)*r22*x467))+(((-1.0)*x468*x469))+((cj2*x470))+(((-1.0)*sj2*x466*x468))+((sj1*sj2*x465)))),IkReal((((r22*x469))+((cj2*sj1*x468))+((x465*x467))+(((-1.0)*cj2*x465*x466))+(((-1.0)*x467*x468))+((sj2*x470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
CheckValue<IkReal> x472=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x465*x468))+((x463*(r20*r20)))+x464+(((-1.0)*x463*x464)))),-1);
if(!x472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x471.value)+(((1.5707963267949)*(x472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x473=IKsin(j4);
IkReal x474=IKcos(j4);
IkReal x475=(cj2*sj1);
IkReal x476=(sj1*sj2);
IkReal x477=((1.0)*cj5);
IkReal x478=((1.0)*cj1);
IkReal x479=((1.0)*r01);
IkReal x480=(r02*sj0);
IkReal x481=(r11*sj5);
IkReal x482=(r21*sj5);
IkReal x483=(r01*sj5);
IkReal x484=(sj2*x478);
IkReal x485=(cj0*x473);
IkReal x486=(cj5*x473);
IkReal x487=((1.0)*x473);
IkReal x488=(sj0*x474);
IkReal x489=(cj0*x474);
IkReal x490=(sj0*sj5*x473);
IkReal x491=((1.0)*x489);
evalcond[0]=(((r20*x486))+(((-1.0)*x476))+(((-1.0)*x482*x487))+((r22*x474))+(((-1.0)*cj2*x478)));
evalcond[1]=((((-1.0)*x484))+(((-1.0)*x474*x482))+((cj5*r20*x474))+x475+(((-1.0)*r22*x487)));
evalcond[2]=((((-1.0)*r10*x477*x485))+((x481*x485))+((x474*x480))+((r00*sj0*x486))+(((-1.0)*x479*x490))+(((-1.0)*r12*x491)));
evalcond[3]=(((cj5*r00*x488))+(((-1.0)*r10*x477*x489))+((r12*x485))+((x481*x489))+(((-1.0)*x480*x487))+(((-1.0)*sj5*x479*x488)));
evalcond[4]=((((-1.0)*r10*x477*x488))+((r02*x485))+((x483*x489))+((x481*x488))+(((-1.0)*r00*x477*x489))+x476+((r12*sj0*x473))+((cj1*cj2)));
evalcond[5]=(((sj0*x473*x481))+(((-1.0)*x484))+(((-1.0)*r02*x491))+((x483*x485))+(((-1.0)*r00*x477*x485))+(((-1.0)*r10*sj0*x473*x477))+x475+(((-1.0)*r12*x488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x492=((2.0)*sj1);
IkReal x493=(cj0*px);
IkReal x494=((2.0)*cj1);
IkReal x495=(py*sj0);
if( IKabs((((x493*x494))+((x494*x495))+(((-1.0)*pz*x492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x494))+(((-1.0)*x492*x495))+(((-1.0)*x492*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x493*x494))+((x494*x495))+(((-1.0)*pz*x492))))+IKsqr(((1.4)+(((-1.0)*pz*x494))+(((-1.0)*x492*x495))+(((-1.0)*x492*x493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x493*x494))+((x494*x495))+(((-1.0)*pz*x492))), ((1.4)+(((-1.0)*pz*x494))+(((-1.0)*x492*x495))+(((-1.0)*x492*x493))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x496=IKsin(j2);
IkReal x497=IKcos(j2);
IkReal x498=((0.5)*cj1);
IkReal x499=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+((x496*x499))+((x497*x498))+pz);
evalcond[1]=((((0.7)*sj1))+((x496*x498))+(((-1.0)*x497*x499))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x500=cj5*cj5;
IkReal x501=r21*r21;
IkReal x502=((r22*r22)+((x500*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x500*x501))+x501);
j4eval[0]=x502;
j4eval[1]=IKsign(x502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x503=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x503;
j4eval[1]=IKsign(x503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x504=cj5*cj5;
IkReal x505=(r00*sj0);
IkReal x506=((1.0)*sj0);
IkReal x507=(r01*r21);
IkReal x508=(cj0*r10);
IkReal x509=(cj0*r11*r21);
IkReal x510=(cj5*r21*sj5);
IkReal x511=((1.0)*x504);
IkReal x512=(cj5*r20*sj5);
IkReal x513=((((-1.0)*x506*x507))+((sj0*x504*x507))+(((-1.0)*x508*x510))+(((-1.0)*cj0*r11*x512))+x509+((cj0*r12*r22))+(((-1.0)*r02*r22*x506))+((r01*sj0*x512))+(((-1.0)*r20*x505*x511))+((x505*x510))+(((-1.0)*x509*x511))+((r20*x504*x508)));
j4eval[0]=x513;
j4eval[1]=IKsign(x513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x514=cj5*cj5;
IkReal x515=(sj1*sj2);
IkReal x516=(r01*sj0);
IkReal x517=(cj0*r10);
IkReal x518=((1.0)*sj5);
IkReal x519=(cj5*r21);
IkReal x520=(cj1*cj2);
IkReal x521=(cj0*r11);
IkReal x522=(cj5*r20);
IkReal x523=(cj0*r12);
IkReal x524=(r20*x514);
IkReal x525=((1.0)*r02*sj0);
IkReal x526=(r21*x514);
IkReal x527=((1.0)*r00*sj0);
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(((((-1.0)*x518*x520*x521))+((sj5*x516*x520))+(((-1.0)*x515*x518*x521))+(((-1.0)*cj5*x520*x527))+((sj5*x515*x516))+(((-1.0)*cj5*x515*x527))+((cj5*x517*x520))+((cj5*x515*x517)))),IkReal(((((-1.0)*x520*x525))+((x515*x523))+(((-1.0)*x515*x525))+((x520*x523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
CheckValue<IkReal> x529=IKPowWithIntegerCheck(IKsign((((r21*x521))+(((-1.0)*x524*x527))+((sj5*x516*x522))+(((-1.0)*x518*x521*x522))+(((-1.0)*x517*x518*x519))+((x516*x526))+((x517*x524))+((r22*x523))+(((-1.0)*r21*x516))+(((-1.0)*x521*x526))+(((-1.0)*r22*x525))+((r00*sj0*sj5*x519)))),-1);
if(!x529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x528.value)+(((1.5707963267949)*(x529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x530=IKsin(j4);
IkReal x531=IKcos(j4);
IkReal x532=(cj2*sj1);
IkReal x533=(sj1*sj2);
IkReal x534=((1.0)*cj5);
IkReal x535=((1.0)*cj1);
IkReal x536=((1.0)*r01);
IkReal x537=(r02*sj0);
IkReal x538=(r11*sj5);
IkReal x539=(r21*sj5);
IkReal x540=(r01*sj5);
IkReal x541=(sj2*x535);
IkReal x542=(cj0*x530);
IkReal x543=(cj5*x530);
IkReal x544=((1.0)*x530);
IkReal x545=(sj0*x531);
IkReal x546=(cj0*x531);
IkReal x547=(sj0*sj5*x530);
IkReal x548=((1.0)*x546);
evalcond[0]=((((-1.0)*cj2*x535))+((r20*x543))+(((-1.0)*x533))+(((-1.0)*x539*x544))+((r22*x531)));
evalcond[1]=((((-1.0)*r22*x544))+((cj5*r20*x531))+(((-1.0)*x531*x539))+(((-1.0)*x541))+x532);
evalcond[2]=(((x531*x537))+((r00*sj0*x543))+(((-1.0)*r10*x534*x542))+((x538*x542))+(((-1.0)*x536*x547))+(((-1.0)*r12*x548)));
evalcond[3]=((((-1.0)*x537*x544))+(((-1.0)*sj5*x536*x545))+((r12*x542))+(((-1.0)*r10*x534*x546))+((x538*x546))+((cj5*r00*x545)));
evalcond[4]=(((r12*sj0*x530))+((r02*x542))+(((-1.0)*r00*x534*x546))+((x540*x546))+x533+(((-1.0)*r10*x534*x545))+((cj1*cj2))+((x538*x545)));
evalcond[5]=((((-1.0)*r00*x534*x542))+((x540*x542))+(((-1.0)*x541))+(((-1.0)*r10*sj0*x530*x534))+(((-1.0)*r02*x548))+((sj0*x530*x538))+x532+(((-1.0)*r12*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x549=(cj1*cj2);
IkReal x550=(cj5*sj0);
IkReal x551=(sj1*sj2);
IkReal x552=(cj0*r12);
IkReal x553=(cj0*cj5);
IkReal x554=((1.0)*r10);
IkReal x555=(sj0*sj5);
IkReal x556=((1.0)*r01);
IkReal x557=(cj0*r11*sj5);
IkReal x558=((1.0)*r02*sj0);
CheckValue<IkReal> x559=IKPowWithIntegerCheck(IKsign((((r10*x555))+((r11*x550))+((cj0*r00*sj5))+((r01*x553)))),-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal(((((-1.0)*x551*x558))+(((-1.0)*x549*x558))+((x549*x552))+((x551*x552)))),IkReal(((((-1.0)*x549*x555*x556))+((r00*x550*x551))+(((-1.0)*x551*x555*x556))+(((-1.0)*x551*x553*x554))+((x549*x557))+((x551*x557))+(((-1.0)*x549*x553*x554))+((r00*x549*x550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x559.value)))+(x560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x561=IKsin(j4);
IkReal x562=IKcos(j4);
IkReal x563=(cj2*sj1);
IkReal x564=(sj1*sj2);
IkReal x565=((1.0)*cj5);
IkReal x566=((1.0)*cj1);
IkReal x567=((1.0)*r01);
IkReal x568=(r02*sj0);
IkReal x569=(r11*sj5);
IkReal x570=(r21*sj5);
IkReal x571=(r01*sj5);
IkReal x572=(sj2*x566);
IkReal x573=(cj0*x561);
IkReal x574=(cj5*x561);
IkReal x575=((1.0)*x561);
IkReal x576=(sj0*x562);
IkReal x577=(cj0*x562);
IkReal x578=(sj0*sj5*x561);
IkReal x579=((1.0)*x577);
evalcond[0]=(((r22*x562))+((r20*x574))+(((-1.0)*x570*x575))+(((-1.0)*x564))+(((-1.0)*cj2*x566)));
evalcond[1]=((((-1.0)*x562*x570))+(((-1.0)*x572))+x563+((cj5*r20*x562))+(((-1.0)*r22*x575)));
evalcond[2]=((((-1.0)*r10*x565*x573))+(((-1.0)*r12*x579))+((x562*x568))+((r00*sj0*x574))+(((-1.0)*x567*x578))+((x569*x573)));
evalcond[3]=(((cj5*r00*x576))+((r12*x573))+(((-1.0)*r10*x565*x577))+(((-1.0)*sj5*x567*x576))+((x569*x577))+(((-1.0)*x568*x575)));
evalcond[4]=(((x571*x577))+(((-1.0)*r10*x565*x576))+((r12*sj0*x561))+((r02*x573))+x564+((x569*x576))+((cj1*cj2))+(((-1.0)*r00*x565*x577)));
evalcond[5]=(((x571*x573))+((sj0*x561*x569))+(((-1.0)*r12*x576))+(((-1.0)*x572))+x563+(((-1.0)*r00*x565*x573))+(((-1.0)*r02*x579))+(((-1.0)*r10*sj0*x561*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x580=cj5*cj5;
IkReal x581=r21*r21;
IkReal x582=(cj5*r20);
IkReal x583=((1.0)*sj1);
IkReal x584=(cj1*sj2);
IkReal x585=(r21*sj5);
IkReal x586=(cj1*cj2);
IkReal x587=(r22*sj1);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal((((x582*x586))+((sj1*sj2*x582))+(((-1.0)*r22*x584))+((cj2*x587))+(((-1.0)*x585*x586))+(((-1.0)*sj2*x583*x585)))),IkReal((((x582*x584))+((sj2*x587))+((cj2*sj1*x585))+(((-1.0)*x584*x585))+((r22*x586))+(((-1.0)*cj2*x582*x583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589=IKPowWithIntegerCheck(IKsign(((((-1.0)*x580*x581))+(r22*r22)+(((-2.0)*x582*x585))+x581+((x580*(r20*r20))))),-1);
if(!x589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x588.value)+(((1.5707963267949)*(x589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x590=IKsin(j4);
IkReal x591=IKcos(j4);
IkReal x592=(cj2*sj1);
IkReal x593=(sj1*sj2);
IkReal x594=((1.0)*cj5);
IkReal x595=((1.0)*cj1);
IkReal x596=((1.0)*r01);
IkReal x597=(r02*sj0);
IkReal x598=(r11*sj5);
IkReal x599=(r21*sj5);
IkReal x600=(r01*sj5);
IkReal x601=(sj2*x595);
IkReal x602=(cj0*x590);
IkReal x603=(cj5*x590);
IkReal x604=((1.0)*x590);
IkReal x605=(sj0*x591);
IkReal x606=(cj0*x591);
IkReal x607=(sj0*sj5*x590);
IkReal x608=((1.0)*x606);
evalcond[0]=(((r22*x591))+((r20*x603))+(((-1.0)*x593))+(((-1.0)*cj2*x595))+(((-1.0)*x599*x604)));
evalcond[1]=((((-1.0)*r22*x604))+((cj5*r20*x591))+x592+(((-1.0)*x591*x599))+(((-1.0)*x601)));
evalcond[2]=((((-1.0)*r10*x594*x602))+(((-1.0)*x596*x607))+(((-1.0)*r12*x608))+((x591*x597))+((r00*sj0*x603))+((x598*x602)));
evalcond[3]=((((-1.0)*r10*x594*x606))+((r12*x602))+(((-1.0)*x597*x604))+(((-1.0)*sj5*x596*x605))+((cj5*r00*x605))+((x598*x606)));
evalcond[4]=((((-1.0)*r10*x594*x605))+((x600*x606))+(((-1.0)*r00*x594*x606))+x593+((r02*x602))+((cj1*cj2))+((r12*sj0*x590))+((x598*x605)));
evalcond[5]=(((sj0*x590*x598))+(((-1.0)*r12*x605))+((x600*x602))+(((-1.0)*r00*x594*x602))+x592+(((-1.0)*x601))+(((-1.0)*r02*x608))+(((-1.0)*r10*sj0*x590*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((1.0)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x609=((2.0)*sj1);
IkReal x610=(cj0*px);
IkReal x611=((2.0)*cj1);
IkReal x612=(py*sj0);
if( IKabs((((x611*x612))+((x610*x611))+(((-1.0)*pz*x609)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x609*x612))+(((-1.0)*x609*x610))+(((-1.0)*pz*x611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x611*x612))+((x610*x611))+(((-1.0)*pz*x609))))+IKsqr(((1.4)+(((-1.0)*x609*x612))+(((-1.0)*x609*x610))+(((-1.0)*pz*x611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x611*x612))+((x610*x611))+(((-1.0)*pz*x609))), ((1.4)+(((-1.0)*x609*x612))+(((-1.0)*x609*x610))+(((-1.0)*pz*x611))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x613=IKsin(j2);
IkReal x614=IKcos(j2);
IkReal x615=((0.5)*cj1);
IkReal x616=((0.5)*sj1);
evalcond[0]=((((-0.7)*cj1))+pz+((x613*x616))+((x614*x615)));
evalcond[1]=((((-1.0)*x614*x616))+(((0.7)*sj1))+((x613*x615))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x617=cj5*cj5;
IkReal x618=r21*r21;
IkReal x619=(((x617*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+x618+(((-1.0)*x617*x618)));
j4eval[0]=x619;
j4eval[1]=IKsign(x619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x620=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x620;
j4eval[1]=IKsign(x620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265;
IkReal x621=cj5*cj5;
IkReal x622=(r00*sj0);
IkReal x623=((1.0)*sj0);
IkReal x624=(r01*r21);
IkReal x625=(cj0*r10);
IkReal x626=(cj0*r11*r21);
IkReal x627=(cj5*r21*sj5);
IkReal x628=((1.0)*x621);
IkReal x629=(cj5*r20*sj5);
IkReal x630=((((-1.0)*cj0*r11*x629))+(((-1.0)*x623*x624))+((r01*sj0*x629))+((r20*x621*x625))+x626+((cj0*r12*r22))+(((-1.0)*x626*x628))+(((-1.0)*r02*r22*x623))+(((-1.0)*r20*x622*x628))+((x622*x627))+(((-1.0)*x625*x627))+((sj0*x621*x624)));
j4eval[0]=x630;
j4eval[1]=IKsign(x630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x631=cj5*cj5;
IkReal x632=(sj1*sj2);
IkReal x633=(r01*sj0);
IkReal x634=(cj0*r10);
IkReal x635=((1.0)*sj5);
IkReal x636=(cj5*r21);
IkReal x637=(cj1*cj2);
IkReal x638=(cj0*r11);
IkReal x639=(cj5*r20);
IkReal x640=(cj0*r12);
IkReal x641=(r20*x631);
IkReal x642=((1.0)*r02*sj0);
IkReal x643=(r21*x631);
IkReal x644=((1.0)*r00*sj0);
CheckValue<IkReal> x645=IKPowWithIntegerCheck(IKsign(((((-1.0)*x635*x638*x639))+((r21*x638))+(((-1.0)*x634*x635*x636))+(((-1.0)*x641*x644))+(((-1.0)*r21*x633))+((r00*sj0*sj5*x636))+(((-1.0)*r22*x642))+((x634*x641))+((sj5*x633*x639))+(((-1.0)*x638*x643))+((r22*x640))+((x633*x643)))),-1);
if(!x645.valid){
continue;
}
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x632*x644))+(((-1.0)*x632*x635*x638))+((cj5*x632*x634))+((sj5*x633*x637))+((sj5*x632*x633))+(((-1.0)*cj5*x637*x644))+((cj5*x634*x637))+(((-1.0)*x635*x637*x638)))),IkReal((((x637*x640))+(((-1.0)*x632*x642))+((x632*x640))+(((-1.0)*x637*x642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x645.value)))+(x646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x647=IKsin(j4);
IkReal x648=IKcos(j4);
IkReal x649=(cj5*r00);
IkReal x650=((1.0)*cj1);
IkReal x651=((1.0)*r01);
IkReal x652=((1.0)*sj1);
IkReal x653=(r11*sj5);
IkReal x654=(cj2*x650);
IkReal x655=(sj2*x652);
IkReal x656=(cj0*x647);
IkReal x657=(sj0*x648);
IkReal x658=(cj5*x647);
IkReal x659=((1.0)*x647);
IkReal x660=((1.0)*cj5*r10);
IkReal x661=(sj5*x648);
IkReal x662=(sj0*x647);
IkReal x663=(sj5*x662);
IkReal x664=((1.0)*cj0*x648);
IkReal x665=(x654+x655);
evalcond[0]=((((-1.0)*r21*sj5*x659))+(((-1.0)*x665))+((r22*x648))+((r20*x658)));
evalcond[1]=((((-1.0)*r21*x661))+((cj5*r20*x648))+((cj1*sj2))+(((-1.0)*cj2*x652))+(((-1.0)*r22*x659)));
evalcond[2]=(((x649*x662))+((r02*x657))+((x653*x656))+(((-1.0)*r12*x664))+(((-1.0)*x656*x660))+(((-1.0)*x651*x663)));
evalcond[3]=(((x649*x657))+(((-1.0)*sj5*x651*x657))+(((-1.0)*cj0*x648*x660))+(((-1.0)*r02*sj0*x659))+((cj0*x648*x653))+((r12*x656)));
evalcond[4]=((((-1.0)*x649*x664))+((r02*x656))+((x653*x657))+((cj0*r01*x661))+((r12*x662))+(((-1.0)*x657*x660))+(((-1.0)*x665)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*sj2*x650))+(((-1.0)*r10*sj0*x658))+((r01*sj5*x656))+((x653*x662))+(((-1.0)*r12*x657))+(((-1.0)*x649*x656))+(((-1.0)*r02*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x666=(cj1*cj2);
IkReal x667=(cj5*sj0);
IkReal x668=(sj1*sj2);
IkReal x669=(cj0*r12);
IkReal x670=(cj0*cj5);
IkReal x671=((1.0)*r10);
IkReal x672=(sj0*sj5);
IkReal x673=((1.0)*r01);
IkReal x674=(cj0*r11*sj5);
IkReal x675=((1.0)*r02*sj0);
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal((((x666*x669))+((x668*x669))+(((-1.0)*x668*x675))+(((-1.0)*x666*x675)))),IkReal(((((-1.0)*x668*x670*x671))+((r00*x666*x667))+(((-1.0)*x666*x672*x673))+((r00*x667*x668))+(((-1.0)*x666*x670*x671))+((x666*x674))+((x668*x674))+(((-1.0)*x668*x672*x673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign((((r10*x672))+((r01*x670))+((r11*x667))+((cj0*r00*sj5)))),-1);
if(!x677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x676.value)+(((1.5707963267949)*(x677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x678=IKsin(j4);
IkReal x679=IKcos(j4);
IkReal x680=(cj5*r00);
IkReal x681=((1.0)*cj1);
IkReal x682=((1.0)*r01);
IkReal x683=((1.0)*sj1);
IkReal x684=(r11*sj5);
IkReal x685=(cj2*x681);
IkReal x686=(sj2*x683);
IkReal x687=(cj0*x678);
IkReal x688=(sj0*x679);
IkReal x689=(cj5*x678);
IkReal x690=((1.0)*x678);
IkReal x691=((1.0)*cj5*r10);
IkReal x692=(sj5*x679);
IkReal x693=(sj0*x678);
IkReal x694=(sj5*x693);
IkReal x695=((1.0)*cj0*x679);
IkReal x696=(x686+x685);
evalcond[0]=(((r22*x679))+(((-1.0)*x696))+((r20*x689))+(((-1.0)*r21*sj5*x690)));
evalcond[1]=(((cj1*sj2))+((cj5*r20*x679))+(((-1.0)*r21*x692))+(((-1.0)*cj2*x683))+(((-1.0)*r22*x690)));
evalcond[2]=((((-1.0)*x687*x691))+(((-1.0)*r12*x695))+(((-1.0)*x682*x694))+((x680*x693))+((x684*x687))+((r02*x688)));
evalcond[3]=((((-1.0)*r02*sj0*x690))+((cj0*x679*x684))+((x680*x688))+(((-1.0)*cj0*x679*x691))+(((-1.0)*sj5*x682*x688))+((r12*x687)));
evalcond[4]=(((cj0*r01*x692))+(((-1.0)*x688*x691))+((r12*x693))+(((-1.0)*x696))+((x684*x688))+(((-1.0)*x680*x695))+((r02*x687)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x680*x687))+(((-1.0)*r10*sj0*x689))+(((-1.0)*r12*x688))+((x684*x693))+(((-1.0)*r02*x695))+(((-1.0)*sj2*x681))+((r01*sj5*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x697=cj5*cj5;
IkReal x698=r21*r21;
IkReal x699=(cj1*cj2);
IkReal x700=(sj1*sj2);
IkReal x701=(cj5*r20);
IkReal x702=(cj2*sj1);
IkReal x703=(r21*sj5);
IkReal x704=(cj1*sj2);
IkReal x705=((1.0)*x703);
CheckValue<IkReal> x706=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x697*x698))+((x697*(r20*r20)))+(((-2.0)*x701*x703))+x698)),-1);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal((((r22*x704))+((x700*x701))+(((-1.0)*x699*x705))+((x699*x701))+(((-1.0)*x700*x705))+(((-1.0)*r22*x702)))),IkReal((((r22*x700))+((x701*x702))+(((-1.0)*x702*x705))+((x703*x704))+((r22*x699))+(((-1.0)*x701*x704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x706.value)))+(x707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x708=IKsin(j4);
IkReal x709=IKcos(j4);
IkReal x710=(cj5*r00);
IkReal x711=((1.0)*cj1);
IkReal x712=((1.0)*r01);
IkReal x713=((1.0)*sj1);
IkReal x714=(r11*sj5);
IkReal x715=(cj2*x711);
IkReal x716=(sj2*x713);
IkReal x717=(cj0*x708);
IkReal x718=(sj0*x709);
IkReal x719=(cj5*x708);
IkReal x720=((1.0)*x708);
IkReal x721=((1.0)*cj5*r10);
IkReal x722=(sj5*x709);
IkReal x723=(sj0*x708);
IkReal x724=(sj5*x723);
IkReal x725=((1.0)*cj0*x709);
IkReal x726=(x715+x716);
evalcond[0]=(((r22*x709))+(((-1.0)*x726))+((r20*x719))+(((-1.0)*r21*sj5*x720)));
evalcond[1]=((((-1.0)*r21*x722))+((cj5*r20*x709))+((cj1*sj2))+(((-1.0)*cj2*x713))+(((-1.0)*r22*x720)));
evalcond[2]=((((-1.0)*r12*x725))+((x714*x717))+((x710*x723))+(((-1.0)*x717*x721))+((r02*x718))+(((-1.0)*x712*x724)));
evalcond[3]=((((-1.0)*sj5*x712*x718))+((x710*x718))+((cj0*x709*x714))+((r12*x717))+(((-1.0)*r02*sj0*x720))+(((-1.0)*cj0*x709*x721)));
evalcond[4]=(((x714*x718))+(((-1.0)*x710*x725))+(((-1.0)*x726))+((cj0*r01*x722))+((r02*x717))+(((-1.0)*x718*x721))+((r12*x723)));
evalcond[5]=(((cj2*sj1))+((r01*sj5*x717))+(((-1.0)*r12*x718))+(((-1.0)*x710*x717))+(((-1.0)*r02*x725))+(((-1.0)*r10*sj0*x719))+(((-1.0)*sj2*x711))+((x714*x723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x727=((2.0)*sj1);
IkReal x728=(cj0*px);
IkReal x729=((2.0)*cj1);
IkReal x730=(py*sj0);
if( IKabs((((x728*x729))+((x729*x730))+(((-1.0)*pz*x727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x727*x728))+(((-1.0)*x727*x730))+(((-1.0)*pz*x729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x728*x729))+((x729*x730))+(((-1.0)*pz*x727))))+IKsqr(((1.4)+(((-1.0)*x727*x728))+(((-1.0)*x727*x730))+(((-1.0)*pz*x729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x728*x729))+((x729*x730))+(((-1.0)*pz*x727))), ((1.4)+(((-1.0)*x727*x728))+(((-1.0)*x727*x730))+(((-1.0)*pz*x729))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x731=IKsin(j2);
IkReal x732=IKcos(j2);
IkReal x733=((0.5)*cj1);
IkReal x734=((0.5)*sj1);
evalcond[0]=(((x731*x734))+(((-0.7)*cj1))+pz+((x732*x733)));
evalcond[1]=((((0.7)*sj1))+((x731*x733))+(((-1.0)*x732*x734))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x735=cj5*cj5;
IkReal x736=r21*r21;
IkReal x737=((r22*r22)+((x735*(r20*r20)))+(((-1.0)*x735*x736))+(((-2.0)*cj5*r20*r21*sj5))+x736);
j4eval[0]=x737;
j4eval[1]=IKsign(x737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x738=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x738;
j4eval[1]=IKsign(x738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=-3.14159265;
IkReal x739=cj5*cj5;
IkReal x740=(r00*sj0);
IkReal x741=((1.0)*sj0);
IkReal x742=(r01*r21);
IkReal x743=(cj0*r10);
IkReal x744=(cj0*r11*r21);
IkReal x745=(cj5*r21*sj5);
IkReal x746=((1.0)*x739);
IkReal x747=(cj5*r20*sj5);
IkReal x748=((((-1.0)*r02*r22*x741))+((r01*sj0*x747))+((sj0*x739*x742))+((x740*x745))+(((-1.0)*x744*x746))+((r20*x739*x743))+(((-1.0)*r20*x740*x746))+(((-1.0)*cj0*r11*x747))+((cj0*r12*r22))+(((-1.0)*x741*x742))+x744+(((-1.0)*x743*x745)));
j4eval[0]=x748;
j4eval[1]=IKsign(x748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x749=cj5*cj5;
IkReal x750=(sj1*sj2);
IkReal x751=(r01*sj0);
IkReal x752=(cj0*r10);
IkReal x753=((1.0)*sj5);
IkReal x754=(cj5*r21);
IkReal x755=(cj1*cj2);
IkReal x756=(cj0*r11);
IkReal x757=(cj5*r20);
IkReal x758=(cj0*r12);
IkReal x759=(r20*x749);
IkReal x760=((1.0)*r02*sj0);
IkReal x761=(r21*x749);
IkReal x762=((1.0)*r00*sj0);
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign(((((-1.0)*x756*x761))+((x752*x759))+((r22*x758))+((r21*x756))+(((-1.0)*r21*x751))+((x751*x761))+(((-1.0)*x753*x756*x757))+((sj5*x751*x757))+(((-1.0)*r22*x760))+(((-1.0)*x752*x753*x754))+(((-1.0)*x759*x762))+((r00*sj0*sj5*x754)))),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(((((-1.0)*x753*x755*x756))+((sj5*x750*x751))+(((-1.0)*x750*x753*x756))+((cj5*x752*x755))+((cj5*x750*x752))+((sj5*x751*x755))+(((-1.0)*cj5*x755*x762))+(((-1.0)*cj5*x750*x762)))),IkReal(((((-1.0)*x750*x760))+(((-1.0)*x755*x760))+((x755*x758))+((x750*x758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x763.value)))+(x764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x765=IKsin(j4);
IkReal x766=IKcos(j4);
IkReal x767=(cj5*r00);
IkReal x768=((1.0)*cj1);
IkReal x769=((1.0)*r01);
IkReal x770=((1.0)*sj1);
IkReal x771=(r11*sj5);
IkReal x772=(cj2*x768);
IkReal x773=(sj2*x770);
IkReal x774=(cj0*x765);
IkReal x775=(sj0*x766);
IkReal x776=(cj5*x765);
IkReal x777=((1.0)*x765);
IkReal x778=((1.0)*cj5*r10);
IkReal x779=(sj5*x766);
IkReal x780=(sj0*x765);
IkReal x781=(sj5*x780);
IkReal x782=((1.0)*cj0*x766);
IkReal x783=(x773+x772);
evalcond[0]=((((-1.0)*r21*sj5*x777))+(((-1.0)*x783))+((r20*x776))+((r22*x766)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r21*x779))+((cj5*r20*x766))+(((-1.0)*r22*x777))+(((-1.0)*cj2*x770)));
evalcond[2]=((((-1.0)*x769*x781))+((x771*x774))+(((-1.0)*x774*x778))+(((-1.0)*r12*x782))+((r02*x775))+((x767*x780)));
evalcond[3]=((((-1.0)*r02*sj0*x777))+((x767*x775))+((r12*x774))+(((-1.0)*cj0*x766*x778))+((cj0*x766*x771))+(((-1.0)*sj5*x769*x775)));
evalcond[4]=(((x771*x775))+(((-1.0)*x783))+(((-1.0)*x767*x782))+(((-1.0)*x775*x778))+((cj0*r01*x779))+((r12*x780))+((r02*x774)));
evalcond[5]=((((-1.0)*r12*x775))+((cj2*sj1))+((r01*sj5*x774))+(((-1.0)*r10*sj0*x776))+(((-1.0)*x767*x774))+((x771*x780))+(((-1.0)*r02*x782))+(((-1.0)*sj2*x768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x784=(cj1*cj2);
IkReal x785=(cj5*sj0);
IkReal x786=(sj1*sj2);
IkReal x787=(cj0*r12);
IkReal x788=(cj0*cj5);
IkReal x789=((1.0)*r10);
IkReal x790=(sj0*sj5);
IkReal x791=((1.0)*r01);
IkReal x792=(cj0*r11*sj5);
IkReal x793=((1.0)*r02*sj0);
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal((((x786*x787))+((x784*x787))+(((-1.0)*x784*x793))+(((-1.0)*x786*x793)))),IkReal(((((-1.0)*x786*x790*x791))+((x786*x792))+((x784*x792))+((r00*x785*x786))+(((-1.0)*x784*x790*x791))+(((-1.0)*x784*x788*x789))+(((-1.0)*x786*x788*x789))+((r00*x784*x785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign((((r01*x788))+((r10*x790))+((cj0*r00*sj5))+((r11*x785)))),-1);
if(!x795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x794.value)+(((1.5707963267949)*(x795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x796=IKsin(j4);
IkReal x797=IKcos(j4);
IkReal x798=(cj5*r00);
IkReal x799=((1.0)*cj1);
IkReal x800=((1.0)*r01);
IkReal x801=((1.0)*sj1);
IkReal x802=(r11*sj5);
IkReal x803=(cj2*x799);
IkReal x804=(sj2*x801);
IkReal x805=(cj0*x796);
IkReal x806=(sj0*x797);
IkReal x807=(cj5*x796);
IkReal x808=((1.0)*x796);
IkReal x809=((1.0)*cj5*r10);
IkReal x810=(sj5*x797);
IkReal x811=(sj0*x796);
IkReal x812=(sj5*x811);
IkReal x813=((1.0)*cj0*x797);
IkReal x814=(x804+x803);
evalcond[0]=((((-1.0)*x814))+((r22*x797))+((r20*x807))+(((-1.0)*r21*sj5*x808)));
evalcond[1]=(((cj5*r20*x797))+((cj1*sj2))+(((-1.0)*r22*x808))+(((-1.0)*r21*x810))+(((-1.0)*cj2*x801)));
evalcond[2]=((((-1.0)*x805*x809))+(((-1.0)*r12*x813))+((r02*x806))+((x802*x805))+(((-1.0)*x800*x812))+((x798*x811)));
evalcond[3]=((((-1.0)*r02*sj0*x808))+((r12*x805))+(((-1.0)*sj5*x800*x806))+((x798*x806))+((cj0*x797*x802))+(((-1.0)*cj0*x797*x809)));
evalcond[4]=(((cj0*r01*x810))+(((-1.0)*x806*x809))+(((-1.0)*x814))+((r02*x805))+(((-1.0)*x798*x813))+((x802*x806))+((r12*x811)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x806))+((x802*x811))+((r01*sj5*x805))+(((-1.0)*x798*x805))+(((-1.0)*r02*x813))+(((-1.0)*r10*sj0*x807))+(((-1.0)*sj2*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x815=cj5*cj5;
IkReal x816=r21*r21;
IkReal x817=(cj1*cj2);
IkReal x818=(sj1*sj2);
IkReal x819=(cj5*r20);
IkReal x820=(cj2*sj1);
IkReal x821=(r21*sj5);
IkReal x822=(cj1*sj2);
IkReal x823=((1.0)*x821);
CheckValue<IkReal> x824=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x815*(r20*r20)))+(((-1.0)*x815*x816))+(((-2.0)*x819*x821))+x816)),-1);
if(!x824.valid){
continue;
}
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(((((-1.0)*x818*x823))+(((-1.0)*x817*x823))+(((-1.0)*r22*x820))+((x817*x819))+((r22*x822))+((x818*x819)))),IkReal((((x821*x822))+((x819*x820))+(((-1.0)*x819*x822))+(((-1.0)*x820*x823))+((r22*x818))+((r22*x817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x824.value)))+(x825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x826=IKsin(j4);
IkReal x827=IKcos(j4);
IkReal x828=(cj5*r00);
IkReal x829=((1.0)*cj1);
IkReal x830=((1.0)*r01);
IkReal x831=((1.0)*sj1);
IkReal x832=(r11*sj5);
IkReal x833=(cj2*x829);
IkReal x834=(sj2*x831);
IkReal x835=(cj0*x826);
IkReal x836=(sj0*x827);
IkReal x837=(cj5*x826);
IkReal x838=((1.0)*x826);
IkReal x839=((1.0)*cj5*r10);
IkReal x840=(sj5*x827);
IkReal x841=(sj0*x826);
IkReal x842=(sj5*x841);
IkReal x843=((1.0)*cj0*x827);
IkReal x844=(x834+x833);
evalcond[0]=((((-1.0)*r21*sj5*x838))+((r20*x837))+(((-1.0)*x844))+((r22*x827)));
evalcond[1]=(((cj1*sj2))+((cj5*r20*x827))+(((-1.0)*r22*x838))+(((-1.0)*r21*x840))+(((-1.0)*cj2*x831)));
evalcond[2]=((((-1.0)*x835*x839))+((x832*x835))+((r02*x836))+(((-1.0)*x830*x842))+(((-1.0)*r12*x843))+((x828*x841)));
evalcond[3]=((((-1.0)*cj0*x827*x839))+(((-1.0)*sj5*x830*x836))+((cj0*x827*x832))+((r12*x835))+((x828*x836))+(((-1.0)*r02*sj0*x838)));
evalcond[4]=((((-1.0)*x828*x843))+((x832*x836))+(((-1.0)*x836*x839))+((r02*x835))+((cj0*r01*x840))+(((-1.0)*x844))+((r12*x841)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*sj0*x837))+(((-1.0)*r02*x843))+((x832*x841))+((r01*sj5*x835))+(((-1.0)*sj2*x829))+(((-1.0)*r12*x836))+(((-1.0)*x828*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x845=cj0*cj0;
IkReal x846=cj5*cj5;
IkReal x847=r01*r01;
IkReal x848=r11*r11;
IkReal x849=r00*r00;
IkReal x850=r02*r02;
IkReal x851=(cj0*sj3);
IkReal x852=(cj5*sj5);
IkReal x853=((2.0)*r11);
IkReal x854=(r00*sj0);
IkReal x855=(r02*sj0);
IkReal x856=((1.0)*x846);
IkReal x857=(cj0*r01*sj0);
IkReal x858=((2.0)*r00*r01);
IkReal x859=((2.0)*cj0*r10*sj0);
IkReal x860=(x845*x848);
IkReal x861=(x845*x847);
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x851))+((sj3*x855)))),IkReal((((cj5*r10*x851))+((r01*sj0*sj3*sj5))+(((-1.0)*r11*sj5*x851))+(((-1.0)*cj5*sj3*x854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign((((x846*x853*x857))+(((-1.0)*x853*x857))+(((-2.0)*cj0*r12*x855))+(((-2.0)*cj0*r10*x846*x854))+(((-1.0)*x852*x858))+((x846*x849))+(((-1.0)*x861))+(((2.0)*r10*x852*x857))+(((-1.0)*x847*x856))+((x845*x852*x858))+(((-1.0)*x856*x860))+(((-1.0)*r10*x845*x852*x853))+(((-1.0)*x845*x850))+((cj0*x852*x853*x854))+(((-1.0)*x845*x849*x856))+x850+x860+x847+((x845*x846*(r10*r10)))+((x846*x861))+((x845*(r12*r12))))),-1);
if(!x863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x862.value)+(((1.5707963267949)*(x863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x864=IKsin(j4);
IkReal x865=IKcos(j4);
IkReal x866=(cj5*r10);
IkReal x867=(r11*sj5);
IkReal x868=(cj5*r00);
IkReal x869=(cj0*x864);
IkReal x870=(sj0*x864);
IkReal x871=(sj0*x865);
IkReal x872=((1.0)*r01*sj5);
IkReal x873=((1.0)*cj0*x865);
evalcond[0]=((((-1.0)*r12*x873))+((x867*x869))+((x868*x870))+((r02*x871))+(((-1.0)*x870*x872))+(((-1.0)*x866*x869)));
evalcond[1]=(sj3+((x868*x871))+(((-1.0)*x866*x873))+(((-1.0)*x871*x872))+((r12*x869))+((cj0*x865*x867))+(((-1.0)*r02*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x874=(sj3*sj4);
IkReal x875=(r20*sj5);
IkReal x876=(cj5*r20);
IkReal x877=(r21*sj1);
IkReal x878=((1.0)*cj1*r21);
IkReal x879=(cj4*r22*sj3);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x875))+((cj1*x879))+((cj5*x877))+((cj1*x874*x876))+(((-1.0)*sj5*x874*x878)))))+(IKabs((((sj1*x874*x876))+((sj1*x879))+(((-1.0)*cj1*x875))+(((-1.0)*cj5*x878))+(((-1.0)*sj5*x874*x877))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x880=(sj4*sj5);
IkReal x881=(cj1*r20);
IkReal x882=(cj5*sj4);
IkReal x883=(cj4*r22);
IkReal x884=(r20*sj1);
IkReal x885=(r21*sj1);
IkReal x886=((1.0)*cj1*r21);
if( IKabs((((sj1*x883))+((x882*x884))+(((-1.0)*cj5*x886))+(((-1.0)*x880*x885))+(((-1.0)*sj5*x881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x881*x882))+((sj5*x884))+((cj5*x885))+((cj1*x883))+(((-1.0)*x880*x886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x883))+((x882*x884))+(((-1.0)*cj5*x886))+(((-1.0)*x880*x885))+(((-1.0)*sj5*x881))))+IKsqr((((x881*x882))+((sj5*x884))+((cj5*x885))+((cj1*x883))+(((-1.0)*x880*x886))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x883))+((x882*x884))+(((-1.0)*cj5*x886))+(((-1.0)*x880*x885))+(((-1.0)*sj5*x881))), (((x881*x882))+((sj5*x884))+((cj5*x885))+((cj1*x883))+(((-1.0)*x880*x886))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x887=IKsin(j2);
IkReal x888=IKcos(j2);
IkReal x889=(r10*sj0);
IkReal x890=(cj0*r00);
IkReal x891=((1.0)*sj5);
IkReal x892=(cj0*r01);
IkReal x893=((1.0)*cj0);
IkReal x894=((1.0)*sj0);
IkReal x895=(sj4*sj5);
IkReal x896=(r11*sj0);
IkReal x897=(sj1*x888);
IkReal x898=(cj1*x888);
IkReal x899=(cj1*x887);
IkReal x900=((1.0)*cj5*sj4);
IkReal x901=(sj1*x887);
IkReal x902=((1.0)*x899);
evalcond[0]=((((-1.0)*x902))+(((-1.0)*cj5*r21))+x897+(((-1.0)*r20*x891)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x898))+(((-1.0)*x901))+(((-1.0)*r21*sj4*x891)));
evalcond[2]=(((sj5*x890))+((sj5*x889))+((cj5*x892))+((cj5*x896))+x898+x901);
evalcond[3]=((((0.5)*x901))+(((-0.7)*cj1))+(((0.162)*x899))+pz+(((-0.162)*x897))+(((0.5)*x898)));
evalcond[4]=((((0.7)*sj1))+(((-0.5)*x897))+(((-1.0)*py*x894))+(((-0.162)*x901))+(((-1.0)*px*x893))+(((-0.162)*x898))+(((0.5)*x899)));
evalcond[5]=((((-1.0)*x890*x900))+((x895*x896))+(((-1.0)*x889*x900))+(((-1.0)*x902))+(((-1.0)*cj4*r02*x893))+((x892*x895))+(((-1.0)*cj4*r12*x894))+x897);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x903=(cj1*sj4);
IkReal x904=((1.0)*r21);
IkReal x905=(cj5*r20);
IkReal x906=(sj1*sj5);
IkReal x907=(cj4*r22);
if( IKabs((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x905))+(((-1.0)*sj4*x904*x906))+((sj1*x907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x907))+(((-1.0)*r20*x906))+((x903*x905))+(((-1.0)*sj5*x903*x904))+(((-1.0)*cj5*sj1*x904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x905))+(((-1.0)*sj4*x904*x906))+((sj1*x907))))+IKsqr((((cj1*x907))+(((-1.0)*r20*x906))+((x903*x905))+(((-1.0)*sj5*x903*x904))+(((-1.0)*cj5*sj1*x904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((cj1*cj5*r21))+((sj1*sj4*x905))+(((-1.0)*sj4*x904*x906))+((sj1*x907))), (((cj1*x907))+(((-1.0)*r20*x906))+((x903*x905))+(((-1.0)*sj5*x903*x904))+(((-1.0)*cj5*sj1*x904))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x908=IKsin(j2);
IkReal x909=IKcos(j2);
IkReal x910=(r10*sj0);
IkReal x911=(cj0*r00);
IkReal x912=((1.0)*sj5);
IkReal x913=(cj0*r01);
IkReal x914=((1.0)*cj0);
IkReal x915=((1.0)*sj0);
IkReal x916=(sj4*sj5);
IkReal x917=(r11*sj0);
IkReal x918=(cj1*x908);
IkReal x919=((1.0)*cj5*sj4);
IkReal x920=(cj1*x909);
IkReal x921=(sj1*x909);
IkReal x922=(sj1*x908);
IkReal x923=((1.0)*x922);
IkReal x924=((1.0)*x920);
IkReal x925=(x924+x923);
evalcond[0]=((((-1.0)*r20*x912))+(((-1.0)*x921))+(((-1.0)*cj5*r21))+x918);
evalcond[1]=((((-1.0)*x925))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x912)));
evalcond[2]=((((-0.7)*cj1))+(((0.5)*x920))+(((0.5)*x922))+(((0.162)*x921))+pz+(((-0.162)*x918)));
evalcond[3]=((((-1.0)*x925))+((sj5*x911))+((sj5*x910))+((cj5*x913))+((cj5*x917)));
evalcond[4]=((((0.7)*sj1))+(((-1.0)*px*x914))+(((-1.0)*py*x915))+(((0.162)*x922))+(((0.162)*x920))+(((0.5)*x918))+(((-0.5)*x921)));
evalcond[5]=((((-1.0)*x910*x919))+(((-1.0)*cj4*r02*x914))+(((-1.0)*x918))+((x916*x917))+((x913*x916))+x921+(((-1.0)*x911*x919))+(((-1.0)*cj4*r12*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x926=((2.0)*sj1);
IkReal x927=(cj0*px);
IkReal x928=((2.0)*cj1);
IkReal x929=(py*sj0);
if( IKabs((((x927*x928))+((x928*x929))+(((-1.0)*pz*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*x926*x929))+(((-1.0)*x926*x927))+(((-1.0)*pz*x928)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x927*x928))+((x928*x929))+(((-1.0)*pz*x926))))+IKsqr(((1.4)+(((-1.0)*x926*x929))+(((-1.0)*x926*x927))+(((-1.0)*pz*x928))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x927*x928))+((x928*x929))+(((-1.0)*pz*x926))), ((1.4)+(((-1.0)*x926*x929))+(((-1.0)*x926*x927))+(((-1.0)*pz*x928))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x930=IKsin(j2);
IkReal x931=IKcos(j2);
IkReal x932=(r10*sj0);
IkReal x933=(cj0*r00);
IkReal x934=((1.0)*cj4);
IkReal x935=(cj0*r02);
IkReal x936=(sj0*sj4);
IkReal x937=(r21*sj5);
IkReal x938=(r11*sj5);
IkReal x939=(cj5*r20);
IkReal x940=((1.0)*sj4);
IkReal x941=(sj1*x931);
IkReal x942=(cj1*x931);
IkReal x943=((0.5)*x930);
IkReal x944=(cj5*x940);
IkReal x945=(sj1*x930);
IkReal x946=(cj0*r01*sj5);
IkReal x947=((1.0)*cj1*x930);
evalcond[0]=((((0.5)*x942))+(((-0.7)*cj1))+((sj1*x943))+pz);
evalcond[1]=((((-0.5)*x941))+(((0.7)*sj1))+((cj1*x943))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=(((cj4*r22))+(((-1.0)*x945))+(((-1.0)*x942))+((sj4*x939))+(((-1.0)*x937*x940)));
evalcond[3]=((((-1.0)*x947))+(((-1.0)*x934*x937))+(((-1.0)*r22*x940))+((cj4*x939))+x941);
evalcond[4]=((((-1.0)*cj5*x932*x934))+((sj4*x935))+((cj4*sj0*x938))+((r12*x936))+x942+x945+((cj4*x946))+(((-1.0)*cj5*x933*x934)));
evalcond[5]=((((-1.0)*r12*sj0*x934))+((x936*x938))+(((-1.0)*x947))+(((-1.0)*x933*x944))+(((-1.0)*x934*x935))+(((-1.0)*x932*x944))+((sj4*x946))+x941);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x948=((2.0)*sj1);
IkReal x949=(cj0*px);
IkReal x950=((2.0)*cj1);
IkReal x951=(py*sj0);
if( IKabs(((((-1.0)*pz*x948))+((x949*x950))+((x950*x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.4)+(((-1.0)*pz*x950))+(((-1.0)*x948*x949))+(((-1.0)*x948*x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*pz*x948))+((x949*x950))+((x950*x951))))+IKsqr(((1.4)+(((-1.0)*pz*x950))+(((-1.0)*x948*x949))+(((-1.0)*x948*x951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*pz*x948))+((x949*x950))+((x950*x951))), ((1.4)+(((-1.0)*pz*x950))+(((-1.0)*x948*x949))+(((-1.0)*x948*x951))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x952=IKsin(j2);
IkReal x953=IKcos(j2);
IkReal x954=((0.5)*cj1);
IkReal x955=(r10*sj0);
IkReal x956=(cj0*r00);
IkReal x957=((1.0)*cj4);
IkReal x958=(cj0*r02);
IkReal x959=(sj0*sj4);
IkReal x960=(r21*sj5);
IkReal x961=(r11*sj5);
IkReal x962=(cj5*r20);
IkReal x963=((1.0)*sj4);
IkReal x964=(cj5*x963);
IkReal x965=((1.0)*x953);
IkReal x966=(cj1*x952);
IkReal x967=(sj1*x953);
IkReal x968=(sj1*x952);
IkReal x969=(cj0*r01*sj5);
IkReal x970=((1.0)*x968);
IkReal x971=(cj1*x965);
IkReal x972=(x971+x970);
evalcond[0]=((((-0.7)*cj1))+(((0.5)*x968))+pz+((x953*x954)));
evalcond[1]=((((0.7)*sj1))+((x952*x954))+(((-0.5)*x967))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[2]=((((-1.0)*x960*x963))+((cj4*r22))+((sj4*x962))+(((-1.0)*x972)));
evalcond[3]=((((-1.0)*x957*x960))+(((-1.0)*sj1*x965))+(((-1.0)*r22*x963))+x966+((cj4*x962)));
evalcond[4]=(((cj4*sj0*x961))+((sj4*x958))+(((-1.0)*cj5*x956*x957))+((r12*x959))+(((-1.0)*x972))+((cj4*x969))+(((-1.0)*cj5*x955*x957)));
evalcond[5]=(((sj4*x969))+(((-1.0)*x966))+(((-1.0)*x956*x964))+(((-1.0)*x957*x958))+((x959*x961))+(((-1.0)*x955*x964))+(((-1.0)*r12*sj0*x957))+x967);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x973=(cj1*cj4);
IkReal x974=(cj3*r22);
IkReal x975=(cj4*sj1);
IkReal x976=(cj5*r20);
IkReal x977=(sj1*sj4);
IkReal x978=(cj1*sj4);
IkReal x979=((1.0)*r21*sj5);
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x977*x979))+(((-1.0)*r22*x978))+((x973*x976))+((x974*x975))+((cj3*x976*x977))+(((-1.0)*x973*x979)))),IkReal(((((-1.0)*cj3*x978*x979))+((r21*sj5*x975))+((r22*x977))+((x973*x974))+(((-1.0)*x975*x976))+((cj3*x976*x978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x980.value)))+(x981.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x982=IKsin(j2);
IkReal x983=IKcos(j2);
IkReal x984=(r10*sj0);
IkReal x985=((0.5)*cj1);
IkReal x986=(sj1*sj3);
IkReal x987=(cj0*r00);
IkReal x988=((1.0)*sj5);
IkReal x989=((1.0)*cj4);
IkReal x990=(cj0*r01);
IkReal x991=(sj0*sj4);
IkReal x992=(cj1*sj3);
IkReal x993=(cj0*r02);
IkReal x994=(cj4*sj5);
IkReal x995=(r11*sj0);
IkReal x996=(cj5*r20);
IkReal x997=((1.0)*cj5*sj4);
IkReal x998=((0.162)*x982);
IkReal x999=(cj1*x983);
IkReal x1000=((1.0)*x982);
IkReal x1001=(sj1*x983);
IkReal x1002=(sj1*x982);
evalcond[0]=((((-1.0)*r20*x988))+((x983*x986))+(((-1.0)*x1000*x992))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*x999))+((sj4*x996))+((cj4*r22))+(((-1.0)*r21*sj4*x988))+(((-1.0)*sj1*x1000)));
evalcond[2]=(((cj3*x1001))+(((-1.0)*cj1*cj3*x1000))+((cj4*x996))+(((-1.0)*cj4*r21*x988))+(((-1.0)*r22*sj4)));
evalcond[3]=(((cj5*x990))+((cj5*x995))+((x983*x992))+((x982*x986))+((sj5*x984))+((sj5*x987)));
evalcond[4]=(((x983*x985))+(((-0.162)*x983*x986))+((x992*x998))+(((-0.7)*cj1))+pz+(((0.5)*x1002)));
evalcond[5]=((((0.7)*sj1))+(((-0.5)*x1001))+((x982*x985))+(((-1.0)*py*sj0))+(((-0.162)*x983*x992))+(((-1.0)*x986*x998))+(((-1.0)*cj0*px)));
evalcond[6]=(((r12*x991))+((sj4*x993))+((x994*x995))+((cj3*x1002))+((x990*x994))+(((-1.0)*cj5*x984*x989))+((cj3*x999))+(((-1.0)*cj5*x987*x989)));
evalcond[7]=(x1001+(((-1.0)*x984*x997))+(((-1.0)*cj1*x1000))+((sj4*sj5*x990))+((r11*sj5*x991))+(((-1.0)*x989*x993))+(((-1.0)*r12*sj0*x989))+(((-1.0)*x987*x997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1003=((0.162)*sj3);
IkReal x1004=(r20*sj5);
IkReal x1005=((0.7)*sj3);
IkReal x1006=(cj1*cj5*r21);
IkReal x1007=((1.0)*pz*sj3);
IkReal x1008=(cj5*r21*sj1);
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal((((cj1*sj1*x1005))+(((-0.5)*x1006))+(((-1.0)*sj1*x1007))+(((-0.5)*cj1*x1004))+((sj1*x1003*x1004))+((x1003*x1008)))),IkReal((((x1005*(cj1*cj1)))+(((-1.0)*cj1*x1007))+(((0.5)*sj1*x1004))+((cj1*x1003*x1004))+(((0.5)*x1008))+((x1003*x1006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1010.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1009.value)+(((1.5707963267949)*(x1010.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1011=IKsin(j2);
IkReal x1012=IKcos(j2);
IkReal x1013=(r10*sj0);
IkReal x1014=((0.5)*cj1);
IkReal x1015=(sj1*sj3);
IkReal x1016=(cj0*r00);
IkReal x1017=((1.0)*sj5);
IkReal x1018=((1.0)*cj4);
IkReal x1019=(cj0*r01);
IkReal x1020=(sj0*sj4);
IkReal x1021=(cj1*sj3);
IkReal x1022=(cj0*r02);
IkReal x1023=(cj4*sj5);
IkReal x1024=(r11*sj0);
IkReal x1025=(cj5*r20);
IkReal x1026=((1.0)*cj5*sj4);
IkReal x1027=((0.162)*x1011);
IkReal x1028=(cj1*x1012);
IkReal x1029=((1.0)*x1011);
IkReal x1030=(sj1*x1012);
IkReal x1031=(sj1*x1011);
evalcond[0]=((((-1.0)*r20*x1017))+(((-1.0)*x1021*x1029))+((x1012*x1015))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*sj1*x1029))+((cj4*r22))+(((-1.0)*x1028))+((sj4*x1025))+(((-1.0)*r21*sj4*x1017)));
evalcond[2]=((((-1.0)*cj1*cj3*x1029))+((cj3*x1030))+((cj4*x1025))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x1017)));
evalcond[3]=(((cj5*x1024))+((sj5*x1013))+((sj5*x1016))+((cj5*x1019))+((x1012*x1021))+((x1011*x1015)));
evalcond[4]=((((-0.162)*x1012*x1015))+(((-0.7)*cj1))+((x1012*x1014))+((x1021*x1027))+pz+(((0.5)*x1031)));
evalcond[5]=((((0.7)*sj1))+(((-0.5)*x1030))+(((-0.162)*x1012*x1021))+(((-1.0)*x1015*x1027))+(((-1.0)*py*sj0))+((x1011*x1014))+(((-1.0)*cj0*px)));
evalcond[6]=(((cj3*x1031))+((sj4*x1022))+((r12*x1020))+((x1023*x1024))+((x1019*x1023))+(((-1.0)*cj5*x1016*x1018))+(((-1.0)*cj5*x1013*x1018))+((cj3*x1028)));
evalcond[7]=(((sj4*sj5*x1019))+x1030+((r11*sj5*x1020))+(((-1.0)*x1018*x1022))+(((-1.0)*r12*sj0*x1018))+(((-1.0)*cj1*x1029))+(((-1.0)*x1016*x1026))+(((-1.0)*x1013*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1032=(sj3*sj4);
IkReal x1033=(r20*sj5);
IkReal x1034=(cj5*r20);
IkReal x1035=(r21*sj1);
IkReal x1036=((1.0)*cj1*r21);
IkReal x1037=(cj4*r22*sj3);
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1038.valid){
continue;
}
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1036))+(((-1.0)*sj5*x1032*x1035))+((sj1*x1037))+(((-1.0)*cj1*x1033))+((sj1*x1032*x1034)))),IkReal((((cj1*x1032*x1034))+((sj1*x1033))+((cj5*x1035))+(((-1.0)*sj5*x1032*x1036))+((cj1*x1037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1038.value)))+(x1039.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1040=IKsin(j2);
IkReal x1041=IKcos(j2);
IkReal x1042=(r10*sj0);
IkReal x1043=((0.5)*cj1);
IkReal x1044=(sj1*sj3);
IkReal x1045=(cj0*r00);
IkReal x1046=((1.0)*sj5);
IkReal x1047=((1.0)*cj4);
IkReal x1048=(cj0*r01);
IkReal x1049=(sj0*sj4);
IkReal x1050=(cj1*sj3);
IkReal x1051=(cj0*r02);
IkReal x1052=(cj4*sj5);
IkReal x1053=(r11*sj0);
IkReal x1054=(cj5*r20);
IkReal x1055=((1.0)*cj5*sj4);
IkReal x1056=((0.162)*x1040);
IkReal x1057=(cj1*x1041);
IkReal x1058=((1.0)*x1040);
IkReal x1059=(sj1*x1041);
IkReal x1060=(sj1*x1040);
evalcond[0]=(((x1041*x1044))+(((-1.0)*cj5*r21))+(((-1.0)*x1050*x1058))+(((-1.0)*r20*x1046)));
evalcond[1]=((((-1.0)*r21*sj4*x1046))+((cj4*r22))+(((-1.0)*sj1*x1058))+(((-1.0)*x1057))+((sj4*x1054)));
evalcond[2]=(((cj3*x1059))+(((-1.0)*cj4*r21*x1046))+(((-1.0)*cj1*cj3*x1058))+(((-1.0)*r22*sj4))+((cj4*x1054)));
evalcond[3]=(((sj5*x1042))+((sj5*x1045))+((x1040*x1044))+((x1041*x1050))+((cj5*x1053))+((cj5*x1048)));
evalcond[4]=((((0.5)*x1060))+(((-0.7)*cj1))+(((-0.162)*x1041*x1044))+((x1041*x1043))+((x1050*x1056))+pz);
evalcond[5]=((((0.7)*sj1))+(((-0.162)*x1041*x1050))+((x1040*x1043))+(((-1.0)*x1044*x1056))+(((-0.5)*x1059))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
evalcond[6]=((((-1.0)*cj5*x1042*x1047))+(((-1.0)*cj5*x1045*x1047))+((x1052*x1053))+((x1048*x1052))+((cj3*x1060))+((cj3*x1057))+((sj4*x1051))+((r12*x1049)));
evalcond[7]=(x1059+(((-1.0)*x1045*x1055))+(((-1.0)*cj1*x1058))+(((-1.0)*x1042*x1055))+(((-1.0)*r12*sj0*x1047))+((r11*sj5*x1049))+((sj4*sj5*x1048))+(((-1.0)*x1047*x1051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1061=((0.162)*sj3);
IkReal x1062=((0.7)*sj3);
IkReal x1063=(r20*sj5);
IkReal x1064=(cj1*cj5*r21);
IkReal x1065=(cj0*px*sj3);
IkReal x1066=(cj5*r21*sj1);
IkReal x1067=(py*sj0*sj3);
CheckValue<IkReal> x1068=IKPowWithIntegerCheck(IKsign(((-0.162)+(((0.162)*(cj3*cj3))))),-1);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal(((((0.5)*x1066))+((x1061*x1064))+((cj1*x1061*x1063))+(((0.5)*sj1*x1063))+((x1062*(cj1*cj1)))+((sj1*x1067))+((sj1*x1065))+(((-1.0)*x1062)))),IkReal(((((0.5)*x1064))+(((-1.0)*cj1*sj1*x1062))+(((-1.0)*sj1*x1061*x1063))+(((-1.0)*x1061*x1066))+((cj1*x1065))+((cj1*x1067))+(((0.5)*cj1*x1063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1068.value)))+(x1069.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1070=IKcos(j2);
IkReal x1071=IKsin(j2);
IkReal x1072=((0.5)*cj1);
IkReal x1073=(cj1*sj3);
IkReal x1074=(sj1*x1070);
IkReal x1075=(sj1*sj3*x1071);
evalcond[0]=(((sj3*x1074))+(((-1.0)*x1071*x1073))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(x1075+((cj0*cj5*r01))+((cj5*r11*sj0))+((x1070*x1073))+((cj0*r00*sj5))+((r10*sj0*sj5)));
evalcond[2]=(((x1070*x1072))+(((-0.7)*cj1))+(((0.5)*sj1*x1071))+pz+(((0.162)*x1071*x1073))+(((-0.162)*sj3*x1074)));
evalcond[3]=((((0.7)*sj1))+((x1071*x1072))+(((-0.162)*x1070*x1073))+(((-0.162)*x1075))+(((-0.5)*x1074))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1076=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1076;
j4eval[1]=IKsign(x1076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1077=cj5*cj5;
IkReal x1078=r21*r21;
IkReal x1079=(x1078+(r22*r22)+((x1077*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x1077*x1078)));
j4eval[0]=x1079;
j4eval[1]=IKsign(x1079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1080=cj5*cj5;
IkReal x1081=(cj0*r11);
IkReal x1082=((1.0)*sj0);
IkReal x1083=(cj0*r10);
IkReal x1084=(cj5*r20*sj5);
IkReal x1085=(r21*x1080);
IkReal x1086=(cj5*r21*sj5);
IkReal x1087=(r20*x1080);
IkReal x1088=(((x1081*x1084))+((x1081*x1085))+(((-1.0)*r21*x1081))+((r00*sj0*x1087))+(((-1.0)*r00*x1082*x1086))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+(((-1.0)*r01*x1082*x1084))+(((-1.0)*r01*x1082*x1085))+(((-1.0)*x1083*x1087))+((r02*r22*sj0))+((x1083*x1086)));
j4eval[0]=x1088;
j4eval[1]=IKsign(x1088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1089=cj5*cj5;
IkReal x1090=((1.0)*sj5);
IkReal x1091=(cj5*r10);
IkReal x1092=(cj0*r11);
IkReal x1093=(r02*sj0);
IkReal x1094=((1.0)*cj0);
IkReal x1095=(r01*sj0);
IkReal x1096=((1.0)*x1095);
IkReal x1097=(r21*x1089);
IkReal x1098=(cj5*r20*sj5);
IkReal x1099=(cj5*r00*sj0);
IkReal x1100=(cj2*cj3*sj1);
IkReal x1101=(cj1*cj3*sj2);
IkReal x1102=(r20*x1089);
IkReal x1103=(cj0*x1100);
CheckValue<IkReal> x1104 = IKatan2WithCheck(IkReal((((x1093*x1100))+(((-1.0)*x1093*x1101))+((cj0*r12*x1101))+(((-1.0)*r12*x1094*x1100)))),IkReal((((sj5*x1095*x1100))+((sj5*x1092*x1101))+(((-1.0)*x1091*x1094*x1101))+(((-1.0)*x1090*x1092*x1100))+(((-1.0)*x1090*x1095*x1101))+((x1091*x1103))+((x1099*x1101))+(((-1.0)*x1099*x1100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1104.valid){
continue;
}
CheckValue<IkReal> x1105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1094*x1102))+(((-1.0)*r12*r22*x1094))+((r21*x1095))+((r22*x1093))+(((-1.0)*x1096*x1097))+((cj0*r21*sj5*x1091))+(((-1.0)*r21*x1090*x1099))+((r00*sj0*x1102))+((x1092*x1097))+((x1092*x1098))+(((-1.0)*cj5*r20*x1090*x1095))+(((-1.0)*r21*x1092)))),-1);
if(!x1105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1104.value)+(((1.5707963267949)*(x1105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1106=IKsin(j4);
IkReal x1107=IKcos(j4);
IkReal x1108=((1.0)*cj5);
IkReal x1109=(cj1*cj2);
IkReal x1110=((1.0)*r01);
IkReal x1111=(cj3*sj1);
IkReal x1112=((1.0)*sj2);
IkReal x1113=(r02*sj0);
IkReal x1114=(r11*sj5);
IkReal x1115=(r21*sj5);
IkReal x1116=(r01*sj5);
IkReal x1117=(cj0*x1106);
IkReal x1118=(cj5*x1106);
IkReal x1119=((1.0)*x1106);
IkReal x1120=(sj0*x1107);
IkReal x1121=(cj0*x1107);
IkReal x1122=(sj0*sj5*x1106);
IkReal x1123=((1.0)*x1121);
evalcond[0]=(((r20*x1118))+(((-1.0)*x1109))+(((-1.0)*sj1*x1112))+((r22*x1107))+(((-1.0)*x1115*x1119)));
evalcond[1]=((((-1.0)*r22*x1119))+(((-1.0)*cj1*cj3*x1112))+((cj2*x1111))+((cj5*r20*x1107))+(((-1.0)*x1107*x1115)));
evalcond[2]=(((x1114*x1117))+(((-1.0)*r12*x1123))+((r00*sj0*x1118))+(((-1.0)*x1110*x1122))+(((-1.0)*r10*x1108*x1117))+((x1107*x1113)));
evalcond[3]=(((x1114*x1121))+sj3+(((-1.0)*x1113*x1119))+(((-1.0)*sj5*x1110*x1120))+((r12*x1117))+((cj5*r00*x1120))+(((-1.0)*r10*x1108*x1121)));
evalcond[4]=(((sj2*x1111))+((x1114*x1120))+(((-1.0)*r00*x1108*x1121))+((x1116*x1121))+((cj3*x1109))+((r12*sj0*x1106))+(((-1.0)*r10*x1108*x1120))+((r02*x1117)));
evalcond[5]=(((sj0*x1106*x1114))+((cj2*sj1))+(((-1.0)*r10*sj0*x1106*x1108))+(((-1.0)*r00*x1108*x1117))+(((-1.0)*cj1*x1112))+((x1116*x1117))+(((-1.0)*r02*x1123))+(((-1.0)*r12*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1124=cj5*cj5;
IkReal x1125=r21*r21;
IkReal x1126=((1.0)*cj3);
IkReal x1127=(r22*sj2);
IkReal x1128=(sj1*sj2);
IkReal x1129=(cj1*cj2);
IkReal x1130=(r21*sj5);
IkReal x1131=(cj5*r20);
IkReal x1132=(cj1*sj2);
IkReal x1133=(cj2*x1131);
IkReal x1134=((1.0)*x1130);
IkReal x1135=(cj2*cj3*sj1);
CheckValue<IkReal> x1136=IKPowWithIntegerCheck(IKsign((x1125+(((-1.0)*x1124*x1125))+(r22*r22)+((x1124*(r20*r20)))+(((-2.0)*x1130*x1131)))),-1);
if(!x1136.valid){
continue;
}
CheckValue<IkReal> x1137 = IKatan2WithCheck(IkReal((((x1129*x1131))+(((-1.0)*cj1*x1126*x1127))+((r22*x1135))+((x1128*x1131))+(((-1.0)*x1128*x1134))+(((-1.0)*x1129*x1134)))),IkReal((((x1130*x1135))+((sj1*x1127))+(((-1.0)*sj1*x1126*x1133))+((r22*x1129))+(((-1.0)*x1126*x1130*x1132))+((cj3*x1131*x1132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1136.value)))+(x1137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1138=IKsin(j4);
IkReal x1139=IKcos(j4);
IkReal x1140=((1.0)*cj5);
IkReal x1141=(cj1*cj2);
IkReal x1142=((1.0)*r01);
IkReal x1143=(cj3*sj1);
IkReal x1144=((1.0)*sj2);
IkReal x1145=(r02*sj0);
IkReal x1146=(r11*sj5);
IkReal x1147=(r21*sj5);
IkReal x1148=(r01*sj5);
IkReal x1149=(cj0*x1138);
IkReal x1150=(cj5*x1138);
IkReal x1151=((1.0)*x1138);
IkReal x1152=(sj0*x1139);
IkReal x1153=(cj0*x1139);
IkReal x1154=(sj0*sj5*x1138);
IkReal x1155=((1.0)*x1153);
evalcond[0]=((((-1.0)*x1141))+(((-1.0)*x1147*x1151))+((r20*x1150))+((r22*x1139))+(((-1.0)*sj1*x1144)));
evalcond[1]=((((-1.0)*cj1*cj3*x1144))+((cj2*x1143))+(((-1.0)*x1139*x1147))+((cj5*r20*x1139))+(((-1.0)*r22*x1151)));
evalcond[2]=(((x1146*x1149))+(((-1.0)*r10*x1140*x1149))+(((-1.0)*r12*x1155))+((x1139*x1145))+((r00*sj0*x1150))+(((-1.0)*x1142*x1154)));
evalcond[3]=(((x1146*x1153))+sj3+(((-1.0)*r10*x1140*x1153))+((cj5*r00*x1152))+(((-1.0)*sj5*x1142*x1152))+(((-1.0)*x1145*x1151))+((r12*x1149)));
evalcond[4]=(((x1146*x1152))+(((-1.0)*r10*x1140*x1152))+(((-1.0)*r00*x1140*x1153))+((r12*sj0*x1138))+((cj3*x1141))+((sj2*x1143))+((r02*x1149))+((x1148*x1153)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj1*x1144))+((sj0*x1138*x1146))+(((-1.0)*r12*x1152))+(((-1.0)*r00*x1140*x1149))+(((-1.0)*r02*x1155))+((x1148*x1149))+(((-1.0)*r10*sj0*x1138*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1156=(cj1*cj2);
IkReal x1157=(cj5*sj0);
IkReal x1158=(sj1*sj2);
IkReal x1159=(cj0*r12);
IkReal x1160=(cj0*cj5);
IkReal x1161=((1.0)*r10);
IkReal x1162=(sj0*sj5);
IkReal x1163=((1.0)*r01);
IkReal x1164=(cj0*r11*sj5);
IkReal x1165=((1.0)*r02*sj0);
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(IKsign((((r11*x1157))+((r10*x1162))+((r01*x1160))+((cj0*r00*sj5)))),-1);
if(!x1166.valid){
continue;
}
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(((((-1.0)*x1156*x1165))+((x1158*x1159))+(((-1.0)*x1158*x1165))+((x1156*x1159)))),IkReal(((((-1.0)*x1156*x1162*x1163))+(((-1.0)*x1156*x1160*x1161))+(((-1.0)*x1158*x1162*x1163))+((x1156*x1164))+(((-1.0)*x1158*x1160*x1161))+((x1158*x1164))+((r00*x1156*x1157))+((r00*x1157*x1158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1166.value)))+(x1167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1168=IKsin(j4);
IkReal x1169=IKcos(j4);
IkReal x1170=((1.0)*cj5);
IkReal x1171=(cj1*cj2);
IkReal x1172=((1.0)*r01);
IkReal x1173=(cj3*sj1);
IkReal x1174=((1.0)*sj2);
IkReal x1175=(r02*sj0);
IkReal x1176=(r11*sj5);
IkReal x1177=(r21*sj5);
IkReal x1178=(r01*sj5);
IkReal x1179=(cj0*x1168);
IkReal x1180=(cj5*x1168);
IkReal x1181=((1.0)*x1168);
IkReal x1182=(sj0*x1169);
IkReal x1183=(cj0*x1169);
IkReal x1184=(sj0*sj5*x1168);
IkReal x1185=((1.0)*x1183);
evalcond[0]=((((-1.0)*sj1*x1174))+((r22*x1169))+((r20*x1180))+(((-1.0)*x1177*x1181))+(((-1.0)*x1171)));
evalcond[1]=(((cj5*r20*x1169))+(((-1.0)*r22*x1181))+(((-1.0)*cj1*cj3*x1174))+((cj2*x1173))+(((-1.0)*x1169*x1177)));
evalcond[2]=((((-1.0)*r10*x1170*x1179))+((r00*sj0*x1180))+((x1176*x1179))+(((-1.0)*x1172*x1184))+(((-1.0)*r12*x1185))+((x1169*x1175)));
evalcond[3]=((((-1.0)*x1175*x1181))+sj3+(((-1.0)*r10*x1170*x1183))+((x1176*x1183))+((r12*x1179))+((cj5*r00*x1182))+(((-1.0)*sj5*x1172*x1182)));
evalcond[4]=(((r12*sj0*x1168))+((r02*x1179))+((x1178*x1183))+(((-1.0)*r10*x1170*x1182))+((x1176*x1182))+(((-1.0)*r00*x1170*x1183))+((cj3*x1171))+((sj2*x1173)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x1182))+((sj0*x1168*x1176))+(((-1.0)*cj1*x1174))+(((-1.0)*r10*sj0*x1168*x1170))+((x1178*x1179))+(((-1.0)*r00*x1170*x1179))+(((-1.0)*r02*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1186=((0.162)*sj3);
IkReal x1187=(r20*sj5);
IkReal x1188=((0.7)*sj3);
IkReal x1189=(cj1*cj5*r21);
IkReal x1190=((1.0)*pz*sj3);
IkReal x1191=(cj5*r21*sj1);
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1192.valid){
continue;
}
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal((((x1186*x1191))+((sj1*x1186*x1187))+(((-0.5)*x1189))+(((-0.5)*cj1*x1187))+((cj1*sj1*x1188))+(((-1.0)*sj1*x1190)))),IkReal((((x1186*x1189))+(((0.5)*sj1*x1187))+((x1188*(cj1*cj1)))+(((-1.0)*cj1*x1190))+(((0.5)*x1191))+((cj1*x1186*x1187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1192.value)))+(x1193.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1194=IKcos(j2);
IkReal x1195=IKsin(j2);
IkReal x1196=((0.5)*cj1);
IkReal x1197=(cj1*sj3);
IkReal x1198=(sj1*x1194);
IkReal x1199=(sj1*sj3*x1195);
evalcond[0]=((((-1.0)*x1195*x1197))+((sj3*x1198))+(((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
evalcond[1]=(x1199+((cj0*cj5*r01))+((cj5*r11*sj0))+((x1194*x1197))+((cj0*r00*sj5))+((r10*sj0*sj5)));
evalcond[2]=((((0.162)*x1195*x1197))+(((-0.7)*cj1))+((x1194*x1196))+(((0.5)*sj1*x1195))+pz+(((-0.162)*sj3*x1198)));
evalcond[3]=((((0.7)*sj1))+(((-0.162)*x1194*x1197))+((x1195*x1196))+(((-0.5)*x1198))+(((-0.162)*x1199))+(((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1200=(((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)));
j4eval[0]=x1200;
j4eval[1]=IKsign(x1200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1201=cj5*cj5;
IkReal x1202=r21*r21;
IkReal x1203=(x1202+(r22*r22)+(((-2.0)*cj5*r20*r21*sj5))+((x1201*(r20*r20)))+(((-1.0)*x1201*x1202)));
j4eval[0]=x1203;
j4eval[1]=IKsign(x1203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1204=cj5*cj5;
IkReal x1205=(cj0*r11);
IkReal x1206=((1.0)*sj0);
IkReal x1207=(cj0*r10);
IkReal x1208=(cj5*r20*sj5);
IkReal x1209=(r21*x1204);
IkReal x1210=(cj5*r21*sj5);
IkReal x1211=(r20*x1204);
IkReal x1212=((((-1.0)*x1207*x1211))+(((-1.0)*r01*x1206*x1208))+(((-1.0)*r01*x1206*x1209))+(((-1.0)*r21*x1205))+((x1207*x1210))+((r01*r21*sj0))+(((-1.0)*cj0*r12*r22))+((x1205*x1209))+((x1205*x1208))+((r00*sj0*x1211))+(((-1.0)*r00*x1206*x1210))+((r02*r22*sj0)));
j4eval[0]=x1212;
j4eval[1]=IKsign(x1212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1213=cj5*cj5;
IkReal x1214=((1.0)*sj5);
IkReal x1215=(cj5*r10);
IkReal x1216=(cj0*r11);
IkReal x1217=(r02*sj0);
IkReal x1218=((1.0)*cj0);
IkReal x1219=(r01*sj0);
IkReal x1220=((1.0)*x1219);
IkReal x1221=(r21*x1213);
IkReal x1222=(cj5*r20*sj5);
IkReal x1223=(cj5*r00*sj0);
IkReal x1224=(cj2*cj3*sj1);
IkReal x1225=(cj1*cj3*sj2);
IkReal x1226=(r20*x1213);
IkReal x1227=(cj0*x1224);
CheckValue<IkReal> x1228 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1218*x1224))+((x1217*x1224))+(((-1.0)*x1217*x1225))+((cj0*r12*x1225)))),IkReal(((((-1.0)*x1223*x1224))+((x1223*x1225))+(((-1.0)*x1214*x1216*x1224))+(((-1.0)*x1214*x1219*x1225))+((sj5*x1219*x1224))+((sj5*x1216*x1225))+(((-1.0)*x1215*x1218*x1225))+((x1215*x1227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1228.valid){
continue;
}
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign((((cj0*r21*sj5*x1215))+(((-1.0)*cj5*r20*x1214*x1219))+((r22*x1217))+(((-1.0)*r10*x1218*x1226))+((x1216*x1222))+((x1216*x1221))+(((-1.0)*r12*r22*x1218))+(((-1.0)*x1220*x1221))+((r00*sj0*x1226))+((r21*x1219))+(((-1.0)*r21*x1216))+(((-1.0)*r21*x1214*x1223)))),-1);
if(!x1229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1228.value)+(((1.5707963267949)*(x1229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1230=IKsin(j4);
IkReal x1231=IKcos(j4);
IkReal x1232=((1.0)*cj5);
IkReal x1233=(cj1*cj2);
IkReal x1234=((1.0)*r01);
IkReal x1235=(cj3*sj1);
IkReal x1236=((1.0)*sj2);
IkReal x1237=(r02*sj0);
IkReal x1238=(r11*sj5);
IkReal x1239=(r21*sj5);
IkReal x1240=(r01*sj5);
IkReal x1241=(cj0*x1230);
IkReal x1242=(cj5*x1230);
IkReal x1243=((1.0)*x1230);
IkReal x1244=(sj0*x1231);
IkReal x1245=(cj0*x1231);
IkReal x1246=(sj0*sj5*x1230);
IkReal x1247=((1.0)*x1245);
evalcond[0]=((((-1.0)*x1239*x1243))+(((-1.0)*x1233))+((r20*x1242))+((r22*x1231))+(((-1.0)*sj1*x1236)));
evalcond[1]=((((-1.0)*cj1*cj3*x1236))+(((-1.0)*x1231*x1239))+((cj2*x1235))+(((-1.0)*r22*x1243))+((cj5*r20*x1231)));
evalcond[2]=((((-1.0)*r12*x1247))+((r00*sj0*x1242))+((x1238*x1241))+((x1231*x1237))+(((-1.0)*r10*x1232*x1241))+(((-1.0)*x1234*x1246)));
evalcond[3]=(sj3+((cj5*r00*x1244))+(((-1.0)*sj5*x1234*x1244))+((x1238*x1245))+((r12*x1241))+(((-1.0)*x1237*x1243))+(((-1.0)*r10*x1232*x1245)));
evalcond[4]=(((cj3*x1233))+((sj2*x1235))+((x1240*x1245))+((r02*x1241))+((x1238*x1244))+(((-1.0)*r00*x1232*x1245))+((r12*sj0*x1230))+(((-1.0)*r10*x1232*x1244)));
evalcond[5]=((((-1.0)*r02*x1247))+((cj2*sj1))+((x1240*x1241))+(((-1.0)*r12*x1244))+((sj0*x1230*x1238))+(((-1.0)*r00*x1232*x1241))+(((-1.0)*cj1*x1236))+(((-1.0)*r10*sj0*x1230*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1248=cj5*cj5;
IkReal x1249=r21*r21;
IkReal x1250=((1.0)*cj3);
IkReal x1251=(r22*sj2);
IkReal x1252=(sj1*sj2);
IkReal x1253=(cj1*cj2);
IkReal x1254=(r21*sj5);
IkReal x1255=(cj5*r20);
IkReal x1256=(cj1*sj2);
IkReal x1257=(cj2*x1255);
IkReal x1258=((1.0)*x1254);
IkReal x1259=(cj2*cj3*sj1);
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal(((((-1.0)*x1253*x1258))+((r22*x1259))+(((-1.0)*x1252*x1258))+((x1253*x1255))+((x1252*x1255))+(((-1.0)*cj1*x1250*x1251)))),IkReal((((r22*x1253))+((sj1*x1251))+((x1254*x1259))+(((-1.0)*x1250*x1254*x1256))+((cj3*x1255*x1256))+(((-1.0)*sj1*x1250*x1257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign((((x1248*(r20*r20)))+x1249+(r22*r22)+(((-1.0)*x1248*x1249))+(((-2.0)*x1254*x1255)))),-1);
if(!x1261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1260.value)+(((1.5707963267949)*(x1261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1262=IKsin(j4);
IkReal x1263=IKcos(j4);
IkReal x1264=((1.0)*cj5);
IkReal x1265=(cj1*cj2);
IkReal x1266=((1.0)*r01);
IkReal x1267=(cj3*sj1);
IkReal x1268=((1.0)*sj2);
IkReal x1269=(r02*sj0);
IkReal x1270=(r11*sj5);
IkReal x1271=(r21*sj5);
IkReal x1272=(r01*sj5);
IkReal x1273=(cj0*x1262);
IkReal x1274=(cj5*x1262);
IkReal x1275=((1.0)*x1262);
IkReal x1276=(sj0*x1263);
IkReal x1277=(cj0*x1263);
IkReal x1278=(sj0*sj5*x1262);
IkReal x1279=((1.0)*x1277);
evalcond[0]=(((r22*x1263))+(((-1.0)*x1271*x1275))+(((-1.0)*sj1*x1268))+(((-1.0)*x1265))+((r20*x1274)));
evalcond[1]=((((-1.0)*r22*x1275))+((cj5*r20*x1263))+((cj2*x1267))+(((-1.0)*x1263*x1271))+(((-1.0)*cj1*cj3*x1268)));
evalcond[2]=(((r00*sj0*x1274))+(((-1.0)*r12*x1279))+(((-1.0)*x1266*x1278))+(((-1.0)*r10*x1264*x1273))+((x1270*x1273))+((x1263*x1269)));
evalcond[3]=(((r12*x1273))+sj3+(((-1.0)*x1269*x1275))+(((-1.0)*r10*x1264*x1277))+((x1270*x1277))+((cj5*r00*x1276))+(((-1.0)*sj5*x1266*x1276)));
evalcond[4]=(((r12*sj0*x1262))+((x1272*x1277))+((cj3*x1265))+((r02*x1273))+(((-1.0)*r00*x1264*x1277))+(((-1.0)*r10*x1264*x1276))+((x1270*x1276))+((sj2*x1267)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*sj0*x1262*x1264))+((x1272*x1273))+(((-1.0)*r00*x1264*x1273))+((sj0*x1262*x1270))+(((-1.0)*cj1*x1268))+(((-1.0)*r02*x1279))+(((-1.0)*r12*x1276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1280=(cj1*cj2);
IkReal x1281=(cj5*sj0);
IkReal x1282=(sj1*sj2);
IkReal x1283=(cj0*r12);
IkReal x1284=(cj0*cj5);
IkReal x1285=((1.0)*r10);
IkReal x1286=(sj0*sj5);
IkReal x1287=((1.0)*r01);
IkReal x1288=(cj0*r11*sj5);
IkReal x1289=((1.0)*r02*sj0);
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal((((x1282*x1283))+((x1280*x1283))+(((-1.0)*x1280*x1289))+(((-1.0)*x1282*x1289)))),IkReal((((r00*x1281*x1282))+(((-1.0)*x1282*x1286*x1287))+((r00*x1280*x1281))+(((-1.0)*x1280*x1286*x1287))+(((-1.0)*x1280*x1284*x1285))+(((-1.0)*x1282*x1284*x1285))+((x1282*x1288))+((x1280*x1288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(IKsign((((r11*x1281))+((r10*x1286))+((r01*x1284))+((cj0*r00*sj5)))),-1);
if(!x1291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1290.value)+(((1.5707963267949)*(x1291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1292=IKsin(j4);
IkReal x1293=IKcos(j4);
IkReal x1294=((1.0)*cj5);
IkReal x1295=(cj1*cj2);
IkReal x1296=((1.0)*r01);
IkReal x1297=(cj3*sj1);
IkReal x1298=((1.0)*sj2);
IkReal x1299=(r02*sj0);
IkReal x1300=(r11*sj5);
IkReal x1301=(r21*sj5);
IkReal x1302=(r01*sj5);
IkReal x1303=(cj0*x1292);
IkReal x1304=(cj5*x1292);
IkReal x1305=((1.0)*x1292);
IkReal x1306=(sj0*x1293);
IkReal x1307=(cj0*x1293);
IkReal x1308=(sj0*sj5*x1292);
IkReal x1309=((1.0)*x1307);
evalcond[0]=((((-1.0)*sj1*x1298))+(((-1.0)*x1295))+(((-1.0)*x1301*x1305))+((r22*x1293))+((r20*x1304)));
evalcond[1]=(((cj2*x1297))+((cj5*r20*x1293))+(((-1.0)*r22*x1305))+(((-1.0)*x1293*x1301))+(((-1.0)*cj1*cj3*x1298)));
evalcond[2]=((((-1.0)*r10*x1294*x1303))+((x1300*x1303))+((x1293*x1299))+(((-1.0)*x1296*x1308))+(((-1.0)*r12*x1309))+((r00*sj0*x1304)));
evalcond[3]=(sj3+(((-1.0)*r10*x1294*x1307))+(((-1.0)*x1299*x1305))+((r12*x1303))+((x1300*x1307))+(((-1.0)*sj5*x1296*x1306))+((cj5*r00*x1306)));
evalcond[4]=(((sj2*x1297))+(((-1.0)*r10*x1294*x1306))+((cj3*x1295))+(((-1.0)*r00*x1294*x1307))+((x1300*x1306))+((x1302*x1307))+((r12*sj0*x1292))+((r02*x1303)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*sj0*x1292*x1294))+(((-1.0)*r12*x1306))+(((-1.0)*r00*x1294*x1303))+(((-1.0)*r02*x1309))+((sj0*x1292*x1300))+((x1302*x1303))+(((-1.0)*cj1*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "94895ddb62c6babb5ffe6a8f51164016"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
